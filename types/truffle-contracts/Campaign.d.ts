/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface CampaignContract extends Truffle.Contract<CampaignInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CampaignInstance>;
}

export interface CampaignDeadlineExtended {
  name: "CampaignDeadlineExtended";
  args: {
    time: BN;
    0: BN;
  };
}

export interface CampaignOwnerSet {
  name: "CampaignOwnerSet";
  args: {
    user: string;
    0: string;
  };
}

export interface CampaignOwnershipTransferred {
  name: "CampaignOwnershipTransferred";
  args: {
    newOwner: string;
    0: string;
  };
}

export interface CampaignReported {
  name: "CampaignReported";
  args: {
    user: string;
    hashedReport: string;
    0: string;
    1: string;
  };
}

export interface CampaignReviewed {
  name: "CampaignReviewed";
  args: {
    user: string;
    hashedReview: string;
    0: string;
    1: string;
  };
}

export interface CampaignSettingsUpdated {
  name: "CampaignSettingsUpdated";
  args: {
    target: BN;
    minimumContribution: BN;
    duration: BN;
    goalType: BN;
    token: string;
    allowContributionAfterTargetIsMet: boolean;
    0: BN;
    1: BN;
    2: BN;
    3: BN;
    4: string;
    5: boolean;
  };
}

export interface CampaignStateChange {
  name: "CampaignStateChange";
  args: {
    state: BN;
    0: BN;
  };
}

export interface CampaignUserDataTransferred {
  name: "CampaignUserDataTransferred";
  args: {
    oldAddress: string;
    newAddress: string;
    0: string;
    1: string;
  };
}

export interface ContributionMade {
  name: "ContributionMade";
  args: {
    contributionId: BN;
    amount: BN;
    rewardId: BN;
    rewardRecipientId: BN;
    withReward: boolean;
    0: BN;
    1: BN;
    2: BN;
    3: BN;
    4: boolean;
  };
}

export interface ContributionWithdrawn {
  name: "ContributionWithdrawn";
  args: {
    contributionId: BN;
    amount: BN;
    user: string;
    0: BN;
    1: BN;
    2: string;
  };
}

export interface DeadlineThresholdExtended {
  name: "DeadlineThresholdExtended";
  args: {
    count: BN;
    0: BN;
  };
}

export interface Paused {
  name: "Paused";
  args: {
    account: string;
    0: string;
  };
}

export interface RequestComplete {
  name: "RequestComplete";
  args: {
    requestId: BN;
    0: BN;
  };
}

export interface RoleAdminChanged {
  name: "RoleAdminChanged";
  args: {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface RoleGranted {
  name: "RoleGranted";
  args: {
    role: string;
    account: string;
    sender: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface RoleRevoked {
  name: "RoleRevoked";
  args: {
    role: string;
    account: string;
    sender: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface Unpaused {
  name: "Unpaused";
  args: {
    account: string;
    0: string;
  };
}

export interface WithdrawalStateUpdated {
  name: "WithdrawalStateUpdated";
  args: {
    withdrawalState: boolean;
    0: boolean;
  };
}

type AllEvents =
  | CampaignDeadlineExtended
  | CampaignOwnerSet
  | CampaignOwnershipTransferred
  | CampaignReported
  | CampaignReviewed
  | CampaignSettingsUpdated
  | CampaignStateChange
  | CampaignUserDataTransferred
  | ContributionMade
  | ContributionWithdrawn
  | DeadlineThresholdExtended
  | Paused
  | RequestComplete
  | RoleAdminChanged
  | RoleGranted
  | RoleRevoked
  | Unpaused
  | WithdrawalStateUpdated;

export interface CampaignInstance extends Truffle.ContractInstance {
  DEFAULT_ADMIN_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MANAGER(txDetails?: Truffle.TransactionDetails): Promise<string>;

  acceptedToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Add an account to the role. Restricted to admins.
   * @param _account Address of user being assigned role
   * @param _role Role being assigned
   */
  addRole: {
    (
      _account: string,
      _role: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _account: string,
      _role: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _account: string,
      _role: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _account: string,
      _role: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowContributionAfterTargetIsMet(
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  approvers(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  approversCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  campaignBalance(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  campaignFactoryContract(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  campaignRequestContract(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  campaignRewardContract(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  campaignState(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  campaignVoteContract(txDetails?: Truffle.TransactionDetails): Promise<string>;

  contributionId(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  deadline(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  deadlineSetTimes(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
   */
  getRoleAdmin(
    role: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  goalType(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
   */
  grantRole: {
    (
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns `true` if `account` has been granted `role`.
   */
  hasRole(
    role: string,
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  minimumContribution(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Returns true if the contract is paused, and false otherwise.
   */
  paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  percent(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  percentBase(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Remove an account from the role. Restricted to admins.
   * @param _account Address of user whose role is being removed
   * @param _role Role being removed
   */
  removeRole: {
    (
      _account: string,
      _role: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _account: string,
      _role: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _account: string,
      _role: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _account: string,
      _role: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Remove oneself from the admin role.
   */
  renounceAdmin: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
   */
  renounceRole: {
    (
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  reportCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  reported(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  reviewCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  reviewed(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
   */
  revokeRole: {
    (
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  root(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * See {IERC165-supportsInterface}.
   */
  supportsInterface(
    interfaceId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  target(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  timeUntilNextTransferConfirmation(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  totalCampaignContribution(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  transferAttemptCount(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  withdrawalsPaused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  /**
   * Constructor
   * @param _campaignFactory Address of factory
   * @param _campaignRequests Address of campaign request contract
   * @param _campaignRewards Address of campaign reward contract
   * @param _campaignVotes Address of campaign vote contract
   * @param _root Address of campaign owner
   */
  __Campaign_init: {
    (
      _campaignFactory: string,
      _campaignRewards: string,
      _campaignRequests: string,
      _campaignVotes: string,
      _root: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _campaignFactory: string,
      _campaignRewards: string,
      _campaignRequests: string,
      _campaignVotes: string,
      _root: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _campaignFactory: string,
      _campaignRewards: string,
      _campaignRequests: string,
      _campaignVotes: string,
      _root: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _campaignFactory: string,
      _campaignRewards: string,
      _campaignRequests: string,
      _campaignVotes: string,
      _root: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Checks if a provided address is a campaign admin
   * @param _user Address of the user
   */
  isCampaignAdmin(
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Returns the campaigns funding goal type
   */
  getCampaignGoalType(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Returns a campaign state by a provided index
   * @param _state Integer representing a state in the campaign
   */
  getCampaignState(
    _state: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Transfers campaign ownership from one user to another.
   * @param _newRoot Address of the user campaign ownership is being transfered to
   * @param _oldRoot Address of the user campaign ownership is being transfered from
   */
  transferCampaignOwnership: {
    (
      _oldRoot: string,
      _newRoot: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _oldRoot: string,
      _newRoot: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _oldRoot: string,
      _newRoot: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _oldRoot: string,
      _newRoot: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Transfers user data in the campaign to another verifed user
   * @param _newAddress Address of the user being transferred to
   * @param _oldAddress Address of the user transferring
   */
  transferCampaignUserData: {
    (
      _oldAddress: string,
      _newAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _oldAddress: string,
      _newAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _oldAddress: string,
      _newAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _oldAddress: string,
      _newAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Modifies campaign details
   * @param _allowContributionAfterTargetIsMet Indicates if the campaign can receive contributions after duration expires
   * @param _duration How long until the campaign stops receiving contributions
   * @param _goalType If flexible the campaign owner is able to create requests if targe isn't met, fixed opposite
   * @param _minimumContribution The minimum amout required to be an approver
   * @param _target Contribution target of the campaign
   * @param _token Address of token to be used for transactions by default
   */
  setCampaignSettings: {
    (
      _target: number | BN | string,
      _minimumContribution: number | BN | string,
      _duration: number | BN | string,
      _goalType: number | BN | string,
      _token: string,
      _allowContributionAfterTargetIsMet: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _target: number | BN | string,
      _minimumContribution: number | BN | string,
      _duration: number | BN | string,
      _goalType: number | BN | string,
      _token: string,
      _allowContributionAfterTargetIsMet: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _target: number | BN | string,
      _minimumContribution: number | BN | string,
      _duration: number | BN | string,
      _goalType: number | BN | string,
      _token: string,
      _allowContributionAfterTargetIsMet: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _target: number | BN | string,
      _minimumContribution: number | BN | string,
      _duration: number | BN | string,
      _goalType: number | BN | string,
      _token: string,
      _allowContributionAfterTargetIsMet: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Extends campaign contribution deadline
   * @param _time How long until the campaign stops receiving contributions
   */
  extendDeadline: {
    (
      _time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Sets the number of times the campaign owner can extended deadlines.
   * @param _count Number of times a campaign owner can extend the deadline
   */
  setDeadlineSetTimes: {
    (
      _count: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _count: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _count: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _count: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Contribute method enables a user become an approver in the campaign
   * @param _rewardId Reward unique id
   * @param _token Address of token to be used for transactions by default
   * @param _withReward Indicates if the user wants a reward alongside their contribution
   */
  contribute: {
    (
      _token: string,
      _rewardId: number | BN | string,
      _withReward: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _token: string,
      _rewardId: number | BN | string,
      _withReward: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string,
      _rewardId: number | BN | string,
      _withReward: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string,
      _rewardId: number | BN | string,
      _withReward: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Allows withdrawal of contribution by a user, works if campaign target isn't met
   * @param _wallet Address where amount is delivered
   */
  withdrawOwnContribution: {
    (_wallet: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _wallet: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _wallet: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _wallet: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Used to measure user funds left after request finalizations
   * @param _user Address of user check is carried out on
   */
  userContributionLoss(
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Withdrawal method called only when a request receives the right amount of votes
   * @param _requestId ID of request being withdrawn
   */
  finalizeRequest: {
    (
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Pauses the campaign and switches `campaignState` to `REVIEW` indicating it's ready to be reviewd by it's approvers after the campaign is over
   */
  reviewMode: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * User acknowledgement of review state enabled by the campaign owner
   */
  reviewCampaignPerformance: {
    (_hashedReview: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _hashedReview: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _hashedReview: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _hashedReview: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Called by campaign manager to mark the campaign as complete right after it secured enough reviews from users
   */
  markCampaignComplete: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Called by an approver to report a campaign. Campaign must be in collection or live state
   */
  reportCampaign: {
    (_hashedReport: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _hashedReport: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _hashedReport: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _hashedReport: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Sets the campaign state, only ever called if campaign is approved with factory
   * @param _state Indicates pause or unpause state
   */
  setCampaignState: {
    (
      _state: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _state: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _state: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _state: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Pauses or Unpauses withdrawals depending on state passed in argument
   * @param _state Indicates pause or unpause state
   */
  toggleWithdrawalState: {
    (_state: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Unpauses the campaign, transactions in the campaign resume per usual
   */
  unpauseCampaign: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Pauses the campaign, it halts all transactions in the campaign
   */
  pauseCampaign: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    DEFAULT_ADMIN_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

    MANAGER(txDetails?: Truffle.TransactionDetails): Promise<string>;

    acceptedToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Add an account to the role. Restricted to admins.
     * @param _account Address of user being assigned role
     * @param _role Role being assigned
     */
    addRole: {
      (
        _account: string,
        _role: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _account: string,
        _role: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _account: string,
        _role: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _account: string,
        _role: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    allowContributionAfterTargetIsMet(
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    approvers(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    approversCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    campaignBalance(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    campaignFactoryContract(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    campaignRequestContract(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    campaignRewardContract(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    campaignState(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    campaignVoteContract(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    contributionId(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    deadline(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    deadlineSetTimes(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    goalType(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole: {
      (
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    minimumContribution(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    percent(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    percentBase(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Remove an account from the role. Restricted to admins.
     * @param _account Address of user whose role is being removed
     * @param _role Role being removed
     */
    removeRole: {
      (
        _account: string,
        _role: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _account: string,
        _role: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _account: string,
        _role: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _account: string,
        _role: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Remove oneself from the admin role.
     */
    renounceAdmin: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole: {
      (
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    reportCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    reported(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    reviewCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    reviewed(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole: {
      (
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    root(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    target(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    timeUntilNextTransferConfirmation(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    totalCampaignContribution(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    transferAttemptCount(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    withdrawalsPaused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    /**
     * Constructor
     * @param _campaignFactory Address of factory
     * @param _campaignRequests Address of campaign request contract
     * @param _campaignRewards Address of campaign reward contract
     * @param _campaignVotes Address of campaign vote contract
     * @param _root Address of campaign owner
     */
    __Campaign_init: {
      (
        _campaignFactory: string,
        _campaignRewards: string,
        _campaignRequests: string,
        _campaignVotes: string,
        _root: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _campaignFactory: string,
        _campaignRewards: string,
        _campaignRequests: string,
        _campaignVotes: string,
        _root: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _campaignFactory: string,
        _campaignRewards: string,
        _campaignRequests: string,
        _campaignVotes: string,
        _root: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _campaignFactory: string,
        _campaignRewards: string,
        _campaignRequests: string,
        _campaignVotes: string,
        _root: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Checks if a provided address is a campaign admin
     * @param _user Address of the user
     */
    isCampaignAdmin(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Returns the campaigns funding goal type
     */
    getCampaignGoalType(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Returns a campaign state by a provided index
     * @param _state Integer representing a state in the campaign
     */
    getCampaignState(
      _state: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Transfers campaign ownership from one user to another.
     * @param _newRoot Address of the user campaign ownership is being transfered to
     * @param _oldRoot Address of the user campaign ownership is being transfered from
     */
    transferCampaignOwnership: {
      (
        _oldRoot: string,
        _newRoot: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _oldRoot: string,
        _newRoot: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _oldRoot: string,
        _newRoot: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _oldRoot: string,
        _newRoot: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Transfers user data in the campaign to another verifed user
     * @param _newAddress Address of the user being transferred to
     * @param _oldAddress Address of the user transferring
     */
    transferCampaignUserData: {
      (
        _oldAddress: string,
        _newAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _oldAddress: string,
        _newAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _oldAddress: string,
        _newAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _oldAddress: string,
        _newAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Modifies campaign details
     * @param _allowContributionAfterTargetIsMet Indicates if the campaign can receive contributions after duration expires
     * @param _duration How long until the campaign stops receiving contributions
     * @param _goalType If flexible the campaign owner is able to create requests if targe isn't met, fixed opposite
     * @param _minimumContribution The minimum amout required to be an approver
     * @param _target Contribution target of the campaign
     * @param _token Address of token to be used for transactions by default
     */
    setCampaignSettings: {
      (
        _target: number | BN | string,
        _minimumContribution: number | BN | string,
        _duration: number | BN | string,
        _goalType: number | BN | string,
        _token: string,
        _allowContributionAfterTargetIsMet: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _target: number | BN | string,
        _minimumContribution: number | BN | string,
        _duration: number | BN | string,
        _goalType: number | BN | string,
        _token: string,
        _allowContributionAfterTargetIsMet: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _target: number | BN | string,
        _minimumContribution: number | BN | string,
        _duration: number | BN | string,
        _goalType: number | BN | string,
        _token: string,
        _allowContributionAfterTargetIsMet: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _target: number | BN | string,
        _minimumContribution: number | BN | string,
        _duration: number | BN | string,
        _goalType: number | BN | string,
        _token: string,
        _allowContributionAfterTargetIsMet: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Extends campaign contribution deadline
     * @param _time How long until the campaign stops receiving contributions
     */
    extendDeadline: {
      (
        _time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Sets the number of times the campaign owner can extended deadlines.
     * @param _count Number of times a campaign owner can extend the deadline
     */
    setDeadlineSetTimes: {
      (
        _count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Contribute method enables a user become an approver in the campaign
     * @param _rewardId Reward unique id
     * @param _token Address of token to be used for transactions by default
     * @param _withReward Indicates if the user wants a reward alongside their contribution
     */
    contribute: {
      (
        _token: string,
        _rewardId: number | BN | string,
        _withReward: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _token: string,
        _rewardId: number | BN | string,
        _withReward: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _token: string,
        _rewardId: number | BN | string,
        _withReward: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _token: string,
        _rewardId: number | BN | string,
        _withReward: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Allows withdrawal of contribution by a user, works if campaign target isn't met
     * @param _wallet Address where amount is delivered
     */
    withdrawOwnContribution: {
      (_wallet: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _wallet: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _wallet: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _wallet: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Used to measure user funds left after request finalizations
     * @param _user Address of user check is carried out on
     */
    userContributionLoss(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Withdrawal method called only when a request receives the right amount of votes
     * @param _requestId ID of request being withdrawn
     */
    finalizeRequest: {
      (
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Pauses the campaign and switches `campaignState` to `REVIEW` indicating it's ready to be reviewd by it's approvers after the campaign is over
     */
    reviewMode: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * User acknowledgement of review state enabled by the campaign owner
     */
    reviewCampaignPerformance: {
      (_hashedReview: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _hashedReview: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _hashedReview: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _hashedReview: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Called by campaign manager to mark the campaign as complete right after it secured enough reviews from users
     */
    markCampaignComplete: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Called by an approver to report a campaign. Campaign must be in collection or live state
     */
    reportCampaign: {
      (_hashedReport: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _hashedReport: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _hashedReport: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _hashedReport: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Sets the campaign state, only ever called if campaign is approved with factory
     * @param _state Indicates pause or unpause state
     */
    setCampaignState: {
      (
        _state: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _state: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _state: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _state: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Pauses or Unpauses withdrawals depending on state passed in argument
     * @param _state Indicates pause or unpause state
     */
    toggleWithdrawalState: {
      (_state: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Unpauses the campaign, transactions in the campaign resume per usual
     */
    unpauseCampaign: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Pauses the campaign, it halts all transactions in the campaign
     */
    pauseCampaign: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
