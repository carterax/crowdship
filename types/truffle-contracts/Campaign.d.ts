/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface CampaignContract extends Truffle.Contract<CampaignInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CampaignInstance>;
}

export interface CampaignDeadlineExtended {
  name: "CampaignDeadlineExtended";
  args: {
    campaignId: BN;
    time: BN;
    0: BN;
    1: BN;
  };
}

export interface CampaignOwnerSet {
  name: "CampaignOwnerSet";
  args: {
    campaignId: BN;
    user: string;
    0: BN;
    1: string;
  };
}

export interface CampaignOwnershipTransferred {
  name: "CampaignOwnershipTransferred";
  args: {
    campaignId: BN;
    newUser: string;
    0: BN;
    1: string;
  };
}

export interface CampaignReported {
  name: "CampaignReported";
  args: {
    campaignId: BN;
    user: string;
    0: BN;
    1: string;
  };
}

export interface CampaignReviewed {
  name: "CampaignReviewed";
  args: {
    approvalStatus: boolean;
    campaignId: BN;
    0: boolean;
    1: BN;
  };
}

export interface CampaignSettingsUpdated {
  name: "CampaignSettingsUpdated";
  args: {
    campaignId: BN;
    minimumContribution: BN;
    deadline: BN;
    goalType: BN;
    token: string;
    0: BN;
    1: BN;
    2: BN;
    3: BN;
    4: string;
  };
}

export interface CampaignStateChange {
  name: "CampaignStateChange";
  args: {
    campaignId: BN;
    state: BN;
    0: BN;
    1: BN;
  };
}

export interface CampaignUserDataTransferred {
  name: "CampaignUserDataTransferred";
  args: {
    campaignId: BN;
    oldAddress: string;
    newAddress: string;
    0: BN;
    1: string;
    2: string;
  };
}

export interface ContributionMade {
  name: "ContributionMade";
  args: {
    campaignId: BN;
    userId: BN;
    amount: BN;
    0: BN;
    1: BN;
    2: BN;
  };
}

export interface ContributionWithdrawn {
  name: "ContributionWithdrawn";
  args: {
    campaignId: BN;
    userId: BN;
    amount: BN;
    0: BN;
    1: BN;
    2: BN;
  };
}

export interface Paused {
  name: "Paused";
  args: {
    account: string;
    0: string;
  };
}

export interface RequestAdded {
  name: "RequestAdded";
  args: {
    requestId: BN;
    campaignId: BN;
    duration: BN;
    recipient: string;
    value: BN;
    0: BN;
    1: BN;
    2: BN;
    3: string;
    4: BN;
  };
}

export interface RequestComplete {
  name: "RequestComplete";
  args: {
    requestId: BN;
    campaignId: BN;
    0: BN;
    1: BN;
  };
}

export interface RequestVoided {
  name: "RequestVoided";
  args: {
    requestId: BN;
    campaignId: BN;
    0: BN;
    1: BN;
  };
}

export interface RewardCreated {
  name: "RewardCreated";
  args: {
    rewardId: BN;
    campaignId: BN;
    value: BN;
    deliveryDate: BN;
    stock: BN;
    active: boolean;
    0: BN;
    1: BN;
    2: BN;
    3: BN;
    4: BN;
    5: boolean;
  };
}

export interface RewardDestroyed {
  name: "RewardDestroyed";
  args: {
    rewardId: BN;
    campaignId: BN;
    0: BN;
    1: BN;
  };
}

export interface RewardModified {
  name: "RewardModified";
  args: {
    rewardId: BN;
    campaignId: BN;
    value: BN;
    deliveryDate: BN;
    stock: BN;
    active: boolean;
    0: BN;
    1: BN;
    2: BN;
    3: BN;
    4: BN;
    5: boolean;
  };
}

export interface RewardRecipientAdded {
  name: "RewardRecipientAdded";
  args: {
    rewardId: BN;
    campaignId: BN;
    user: BN;
    amount: BN;
    0: BN;
    1: BN;
    2: BN;
    3: BN;
  };
}

export interface RewardRecipientApproval {
  name: "RewardRecipientApproval";
  args: {
    rewardRecipientId: BN;
    campaignId: BN;
    0: BN;
    1: BN;
  };
}

export interface RewardStockIncreased {
  name: "RewardStockIncreased";
  args: {
    rewardId: BN;
    campaignId: BN;
    count: BN;
    0: BN;
    1: BN;
    2: BN;
  };
}

export interface RewarderApproval {
  name: "RewarderApproval";
  args: {
    rewardRecipientId: BN;
    campaignId: BN;
    status: boolean;
    0: BN;
    1: BN;
    2: boolean;
  };
}

export interface RoleAdminChanged {
  name: "RoleAdminChanged";
  args: {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface RoleGranted {
  name: "RoleGranted";
  args: {
    role: string;
    account: string;
    sender: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface RoleRevoked {
  name: "RoleRevoked";
  args: {
    role: string;
    account: string;
    sender: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface TargetMet {
  name: "TargetMet";
  args: {
    campaignId: BN;
    amount: BN;
    0: BN;
    1: BN;
  };
}

export interface Unpaused {
  name: "Unpaused";
  args: {
    account: string;
    0: string;
  };
}

export interface VoteCancelled {
  name: "VoteCancelled";
  args: {
    requestId: BN;
    campaignId: BN;
    0: BN;
    1: BN;
  };
}

export interface Voted {
  name: "Voted";
  args: {
    requestId: BN;
    campaignId: BN;
    0: BN;
    1: BN;
  };
}

type AllEvents =
  | CampaignDeadlineExtended
  | CampaignOwnerSet
  | CampaignOwnershipTransferred
  | CampaignReported
  | CampaignReviewed
  | CampaignSettingsUpdated
  | CampaignStateChange
  | CampaignUserDataTransferred
  | ContributionMade
  | ContributionWithdrawn
  | Paused
  | RequestAdded
  | RequestComplete
  | RequestVoided
  | RewardCreated
  | RewardDestroyed
  | RewardModified
  | RewardRecipientAdded
  | RewardRecipientApproval
  | RewardStockIncreased
  | RewarderApproval
  | RoleAdminChanged
  | RoleGranted
  | RoleRevoked
  | TargetMet
  | Unpaused
  | VoteCancelled
  | Voted;

export interface CampaignInstance extends Truffle.ContractInstance {
  DEFAULT_ADMIN_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  acceptedToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allowContributionAfterTargetIsMet(
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  approvers(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  approversCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  campaignFactoryContract(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  campaignID(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  campaignState(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  currentRunningRequest(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  deadline(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  deadlineSetTimes(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  finalizedRequestCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
   */
  getRoleAdmin(
    role: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  goalType(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
   */
  grantRole: {
    (
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns `true` if `account` has been granted `role`.
   */
  hasRole(
    role: string,
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  maximumContribution(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  minimumContribution(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  pauseWithdrawals(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  /**
   * Returns true if the contract is paused, and false otherwise.
   */
  paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  positiveReviewCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
   */
  renounceRole: {
    (
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  requestCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  requests(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: boolean; 2: BN; 3: BN; 4: BN; 5: BN; 6: boolean }>;

  reviewCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  reviewed(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
   */
  revokeRole: {
    (
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  rewardRecipients(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: string; 2: boolean; 3: boolean }>;

  rewardToRewardRecipientCount(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  rewards(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: boolean; 4: boolean }>;

  root(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * See {IERC165-supportsInterface}.
   */
  supportsInterface(
    interfaceId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  target(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  totalCampaignContribution(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  userRewardCount(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  userTotalContribution(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Constructor
   * @param _campaignFactory Address of factory
   * @param _root Address of campaign owner
   */
  __Campaign_init: {
    (
      _campaignFactory: string,
      _root: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _campaignFactory: string,
      _root: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _campaignFactory: string,
      _root: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _campaignFactory: string,
      _root: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Transfers campaign ownership from one user to another.
   * @param _newRoot Address of the user campaign ownership is being transfered to
   */
  transferCampaignOwnership: {
    (_newRoot: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _newRoot: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _newRoot: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _newRoot: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Transfers user data in the campaign to another verifed user
   * @param _newAddress Address of the user being transferred to
   * @param _oldAddress Address of the user transferring
   */
  transferCampaignUserData: {
    (
      _oldAddress: string,
      _newAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _oldAddress: string,
      _newAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _oldAddress: string,
      _newAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _oldAddress: string,
      _newAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Modifies campaign details while it's not approved
   * @param _allowContributionAfterTargetIsMet Indicates if the campaign can receive contributions after duration expires
   * @param _duration How long until the campaign stops receiving contributions
   * @param _goalType If flexible the campaign owner is able to create requests if targe isn't met, fixed opposite
   * @param _minimumContribution The minimum amout required to be an approver
   * @param _target Contribution target of the campaign
   * @param _token Address of token to be used for transactions by default
   */
  setCampaignSettings: {
    (
      _target: number | BN | string,
      _minimumContribution: number | BN | string,
      _duration: number | BN | string,
      _goalType: number | BN | string,
      _token: string,
      _allowContributionAfterTargetIsMet: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _target: number | BN | string,
      _minimumContribution: number | BN | string,
      _duration: number | BN | string,
      _goalType: number | BN | string,
      _token: string,
      _allowContributionAfterTargetIsMet: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _target: number | BN | string,
      _minimumContribution: number | BN | string,
      _duration: number | BN | string,
      _goalType: number | BN | string,
      _token: string,
      _allowContributionAfterTargetIsMet: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _target: number | BN | string,
      _minimumContribution: number | BN | string,
      _duration: number | BN | string,
      _goalType: number | BN | string,
      _token: string,
      _allowContributionAfterTargetIsMet: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Extends campaign contribution deadline
   * @param _time How long until the campaign stops receiving contributions
   */
  extendDeadline: {
    (
      _time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Sets the number of times the campaign owner can extended deadlines. Restricted to factory
   * @param _count Number of times a campaign owner can extend the deadline
   */
  setDeadlineSetTimes: {
    (
      _count: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _count: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _count: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _count: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Creates rewards contributors can attain
   * @param _active Indicates if contributors can attain the reward
   * @param _deliveryDate Time in which reward will be deliverd to contriutors
   * @param _stock Quantity available for dispatch
   * @param _value Reward cost
   */
  createReward: {
    (
      _value: number | BN | string,
      _deliveryDate: number | BN | string,
      _stock: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      _deliveryDate: number | BN | string,
      _stock: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      _deliveryDate: number | BN | string,
      _stock: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      _deliveryDate: number | BN | string,
      _stock: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Modifies a reward by id
   * @param _active Indicates if contributors can attain the reward
   * @param _deliveryDate Time in which reward will be deliverd to contriutors
   * @param _rewardId Reward unique id
   * @param _stock Quantity available for dispatch
   * @param _value Reward cost
   */
  modifyReward: {
    (
      _rewardId: number | BN | string,
      _value: number | BN | string,
      _deliveryDate: number | BN | string,
      _stock: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _rewardId: number | BN | string,
      _value: number | BN | string,
      _deliveryDate: number | BN | string,
      _stock: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _rewardId: number | BN | string,
      _value: number | BN | string,
      _deliveryDate: number | BN | string,
      _stock: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _rewardId: number | BN | string,
      _value: number | BN | string,
      _deliveryDate: number | BN | string,
      _stock: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Increases a reward stock count
   * @param _count Stock count to increase by
   * @param _rewardId Reward unique id
   */
  increaseRewardStock: {
    (
      _rewardId: number | BN | string,
      _count: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _rewardId: number | BN | string,
      _count: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _rewardId: number | BN | string,
      _count: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _rewardId: number | BN | string,
      _count: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Deletes a reward by id
   * @param _rewardId Reward unique id
   */
  destroyReward: {
    (
      _rewardId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _rewardId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _rewardId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _rewardId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Called by the campaign owner to indicate they delivered the reward to the rewardRecipient
   * @param _rewardRecipientId ID to struct containing reward and user to be rewarded
   * @param _status Indicates if the delivery was successful or not
   */
  campaignSentReward: {
    (
      _rewardRecipientId: number | BN | string,
      _status: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _rewardRecipientId: number | BN | string,
      _status: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _rewardRecipientId: number | BN | string,
      _status: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _rewardRecipientId: number | BN | string,
      _status: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Called by a user eligible for rewards to indicate they received their reward
   * @param _rewardRecipientId ID to struct containing reward and user to be rewarded
   */
  userReceivedCampaignReward: {
    (
      _rewardRecipientId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _rewardRecipientId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _rewardRecipientId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _rewardRecipientId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Contribute method enables a user become an approver in the campaign
   * @param _rewardId Reward unique id
   * @param _token Address of token to be used for transactions by default
   * @param _withReward Indicates if the user wants a reward alongside their contribution
   */
  contribute: {
    (
      _token: string,
      _rewardId: number | BN | string,
      _withReward: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _token: string,
      _rewardId: number | BN | string,
      _withReward: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _token: string,
      _rewardId: number | BN | string,
      _withReward: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string,
      _rewardId: number | BN | string,
      _withReward: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Allows withdrawal of contribution by a user, works if campaign target isn't met
   * @param _amount Amount requested to be withdrawn from contributions
   * @param _wallet Address where amount is delivered
   */
  withdrawOwnContribution: {
    (
      _amount: number | BN | string,
      _wallet: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amount: number | BN | string,
      _wallet: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BN | string,
      _wallet: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      _wallet: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Allows withdrawal of balance by factory on behalf of a user.  Cases where users wallet is compromised
   * @param _amount Amount requested to be withdrawn from contributions
   * @param _user User whose funds are being requested
   * @param _wallet Address where amount is delivered
   */
  withdrawContributionForUser: {
    (
      _user: string,
      _amount: number | BN | string,
      _wallet: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _user: string,
      _amount: number | BN | string,
      _wallet: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _user: string,
      _amount: number | BN | string,
      _wallet: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _user: string,
      _amount: number | BN | string,
      _wallet: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Creates a formal request to withdraw funds from user contributions called by the campagn manager or factory Restricted unless target is met and deadline is expired
   * @param _duration Duration until users aren't able to vote on the request
   * @param _recipient Address where requested funds are deposited
   * @param _value Amount being requested by the campaign manager
   */
  createRequest: {
    (
      _recipient: string,
      _value: number | BN | string,
      _duration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _recipient: string,
      _value: number | BN | string,
      _duration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _recipient: string,
      _value: number | BN | string,
      _duration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _recipient: string,
      _value: number | BN | string,
      _duration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Renders a request void and useless
   * @param _requestId ID of request being voided
   */
  voidRequest: {
    (
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Approvers only method which approves spending request issued by the campaign manager or factory
   * @param _requestId ID of request being voted on
   */
  voteOnRequest: {
    (
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Approvers only method which cancels initial vote on a request
   * @param _requestId ID of request being voted on
   */
  cancelVote: {
    (
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Withdrawal method called only when a request receives the right amount votes
   * @param _requestId ID of request being withdrawn
   */
  finalizeRequest: {
    (
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Pauses the campaign and switches `campaignState` to `REVIEW` indicating it's ready to be reviewd by it's approvers after the campaign is over
   */
  reviewMode: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * User acknowledgement of review state enabled by the campaign owner
   * @param _approval Indicates user approval of the campaign
   */
  reviewCampaignPerformance: {
    (_approval: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _approval: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _approval: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _approval: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Called by campaign manager to mark the campaign as complete right after it secured enough reviews from users
   */
  markCampaignComplete: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Called by an approver to report a campaign to factory. Campaign must be in collection or live state
   */
  reportCampaign: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Changes campaign state
   */
  setCampaignState: {
    (
      _state: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _state: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _state: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _state: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Pauses and Unpauses withdrawals
   * @param _state Indicates pause or unpause state
   */
  toggleWithdrawalState: {
    (_state: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Unpauses the campaign, transactions in the campaign resume per usual
   */
  unpauseCampaign: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Pauses the campaign, it halts all transactions in the campaign
   */
  pauseCampaign: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    DEFAULT_ADMIN_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

    acceptedToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

    allowContributionAfterTargetIsMet(
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    approvers(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    approversCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    campaignFactoryContract(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    campaignID(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    campaignState(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    currentRunningRequest(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    deadline(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    deadlineSetTimes(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    finalizedRequestCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    goalType(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole: {
      (
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    maximumContribution(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    minimumContribution(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    pauseWithdrawals(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    positiveReviewCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole: {
      (
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    requestCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    requests(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: string;
      1: boolean;
      2: BN;
      3: BN;
      4: BN;
      5: BN;
      6: boolean;
    }>;

    reviewCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    reviewed(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole: {
      (
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    rewardRecipients(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: string; 2: boolean; 3: boolean }>;

    rewardToRewardRecipientCount(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    rewards(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: boolean; 4: boolean }>;

    root(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    target(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    totalCampaignContribution(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    userRewardCount(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    userTotalContribution(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Constructor
     * @param _campaignFactory Address of factory
     * @param _root Address of campaign owner
     */
    __Campaign_init: {
      (
        _campaignFactory: string,
        _root: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _campaignFactory: string,
        _root: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _campaignFactory: string,
        _root: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _campaignFactory: string,
        _root: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Transfers campaign ownership from one user to another.
     * @param _newRoot Address of the user campaign ownership is being transfered to
     */
    transferCampaignOwnership: {
      (_newRoot: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _newRoot: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _newRoot: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _newRoot: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Transfers user data in the campaign to another verifed user
     * @param _newAddress Address of the user being transferred to
     * @param _oldAddress Address of the user transferring
     */
    transferCampaignUserData: {
      (
        _oldAddress: string,
        _newAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _oldAddress: string,
        _newAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _oldAddress: string,
        _newAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _oldAddress: string,
        _newAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Modifies campaign details while it's not approved
     * @param _allowContributionAfterTargetIsMet Indicates if the campaign can receive contributions after duration expires
     * @param _duration How long until the campaign stops receiving contributions
     * @param _goalType If flexible the campaign owner is able to create requests if targe isn't met, fixed opposite
     * @param _minimumContribution The minimum amout required to be an approver
     * @param _target Contribution target of the campaign
     * @param _token Address of token to be used for transactions by default
     */
    setCampaignSettings: {
      (
        _target: number | BN | string,
        _minimumContribution: number | BN | string,
        _duration: number | BN | string,
        _goalType: number | BN | string,
        _token: string,
        _allowContributionAfterTargetIsMet: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _target: number | BN | string,
        _minimumContribution: number | BN | string,
        _duration: number | BN | string,
        _goalType: number | BN | string,
        _token: string,
        _allowContributionAfterTargetIsMet: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _target: number | BN | string,
        _minimumContribution: number | BN | string,
        _duration: number | BN | string,
        _goalType: number | BN | string,
        _token: string,
        _allowContributionAfterTargetIsMet: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _target: number | BN | string,
        _minimumContribution: number | BN | string,
        _duration: number | BN | string,
        _goalType: number | BN | string,
        _token: string,
        _allowContributionAfterTargetIsMet: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Extends campaign contribution deadline
     * @param _time How long until the campaign stops receiving contributions
     */
    extendDeadline: {
      (
        _time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Sets the number of times the campaign owner can extended deadlines. Restricted to factory
     * @param _count Number of times a campaign owner can extend the deadline
     */
    setDeadlineSetTimes: {
      (
        _count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Creates rewards contributors can attain
     * @param _active Indicates if contributors can attain the reward
     * @param _deliveryDate Time in which reward will be deliverd to contriutors
     * @param _stock Quantity available for dispatch
     * @param _value Reward cost
     */
    createReward: {
      (
        _value: number | BN | string,
        _deliveryDate: number | BN | string,
        _stock: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        _deliveryDate: number | BN | string,
        _stock: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        _deliveryDate: number | BN | string,
        _stock: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        _deliveryDate: number | BN | string,
        _stock: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Modifies a reward by id
     * @param _active Indicates if contributors can attain the reward
     * @param _deliveryDate Time in which reward will be deliverd to contriutors
     * @param _rewardId Reward unique id
     * @param _stock Quantity available for dispatch
     * @param _value Reward cost
     */
    modifyReward: {
      (
        _rewardId: number | BN | string,
        _value: number | BN | string,
        _deliveryDate: number | BN | string,
        _stock: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _rewardId: number | BN | string,
        _value: number | BN | string,
        _deliveryDate: number | BN | string,
        _stock: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _rewardId: number | BN | string,
        _value: number | BN | string,
        _deliveryDate: number | BN | string,
        _stock: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _rewardId: number | BN | string,
        _value: number | BN | string,
        _deliveryDate: number | BN | string,
        _stock: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Increases a reward stock count
     * @param _count Stock count to increase by
     * @param _rewardId Reward unique id
     */
    increaseRewardStock: {
      (
        _rewardId: number | BN | string,
        _count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _rewardId: number | BN | string,
        _count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _rewardId: number | BN | string,
        _count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _rewardId: number | BN | string,
        _count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Deletes a reward by id
     * @param _rewardId Reward unique id
     */
    destroyReward: {
      (
        _rewardId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _rewardId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _rewardId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _rewardId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Called by the campaign owner to indicate they delivered the reward to the rewardRecipient
     * @param _rewardRecipientId ID to struct containing reward and user to be rewarded
     * @param _status Indicates if the delivery was successful or not
     */
    campaignSentReward: {
      (
        _rewardRecipientId: number | BN | string,
        _status: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _rewardRecipientId: number | BN | string,
        _status: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _rewardRecipientId: number | BN | string,
        _status: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _rewardRecipientId: number | BN | string,
        _status: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Called by a user eligible for rewards to indicate they received their reward
     * @param _rewardRecipientId ID to struct containing reward and user to be rewarded
     */
    userReceivedCampaignReward: {
      (
        _rewardRecipientId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _rewardRecipientId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _rewardRecipientId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _rewardRecipientId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Contribute method enables a user become an approver in the campaign
     * @param _rewardId Reward unique id
     * @param _token Address of token to be used for transactions by default
     * @param _withReward Indicates if the user wants a reward alongside their contribution
     */
    contribute: {
      (
        _token: string,
        _rewardId: number | BN | string,
        _withReward: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _token: string,
        _rewardId: number | BN | string,
        _withReward: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _token: string,
        _rewardId: number | BN | string,
        _withReward: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _token: string,
        _rewardId: number | BN | string,
        _withReward: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Allows withdrawal of contribution by a user, works if campaign target isn't met
     * @param _amount Amount requested to be withdrawn from contributions
     * @param _wallet Address where amount is delivered
     */
    withdrawOwnContribution: {
      (
        _amount: number | BN | string,
        _wallet: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        _wallet: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amount: number | BN | string,
        _wallet: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        _wallet: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Allows withdrawal of balance by factory on behalf of a user.  Cases where users wallet is compromised
     * @param _amount Amount requested to be withdrawn from contributions
     * @param _user User whose funds are being requested
     * @param _wallet Address where amount is delivered
     */
    withdrawContributionForUser: {
      (
        _user: string,
        _amount: number | BN | string,
        _wallet: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _user: string,
        _amount: number | BN | string,
        _wallet: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _user: string,
        _amount: number | BN | string,
        _wallet: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _user: string,
        _amount: number | BN | string,
        _wallet: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Creates a formal request to withdraw funds from user contributions called by the campagn manager or factory Restricted unless target is met and deadline is expired
     * @param _duration Duration until users aren't able to vote on the request
     * @param _recipient Address where requested funds are deposited
     * @param _value Amount being requested by the campaign manager
     */
    createRequest: {
      (
        _recipient: string,
        _value: number | BN | string,
        _duration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _recipient: string,
        _value: number | BN | string,
        _duration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _recipient: string,
        _value: number | BN | string,
        _duration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _recipient: string,
        _value: number | BN | string,
        _duration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Renders a request void and useless
     * @param _requestId ID of request being voided
     */
    voidRequest: {
      (
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Approvers only method which approves spending request issued by the campaign manager or factory
     * @param _requestId ID of request being voted on
     */
    voteOnRequest: {
      (
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Approvers only method which cancels initial vote on a request
     * @param _requestId ID of request being voted on
     */
    cancelVote: {
      (
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Withdrawal method called only when a request receives the right amount votes
     * @param _requestId ID of request being withdrawn
     */
    finalizeRequest: {
      (
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Pauses the campaign and switches `campaignState` to `REVIEW` indicating it's ready to be reviewd by it's approvers after the campaign is over
     */
    reviewMode: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * User acknowledgement of review state enabled by the campaign owner
     * @param _approval Indicates user approval of the campaign
     */
    reviewCampaignPerformance: {
      (_approval: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _approval: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _approval: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _approval: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Called by campaign manager to mark the campaign as complete right after it secured enough reviews from users
     */
    markCampaignComplete: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Called by an approver to report a campaign to factory. Campaign must be in collection or live state
     */
    reportCampaign: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Changes campaign state
     */
    setCampaignState: {
      (
        _state: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _state: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _state: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _state: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Pauses and Unpauses withdrawals
     * @param _state Indicates pause or unpause state
     */
    toggleWithdrawalState: {
      (_state: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Unpauses the campaign, transactions in the campaign resume per usual
     */
    unpauseCampaign: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Pauses the campaign, it halts all transactions in the campaign
     */
    pauseCampaign: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
