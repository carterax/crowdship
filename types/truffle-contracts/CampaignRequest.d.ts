/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface CampaignRequestContract
  extends Truffle.Contract<CampaignRequestInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CampaignRequestInstance>;
}

export interface Paused {
  name: "Paused";
  args: {
    account: string;
    0: string;
  };
}

export interface RequestAdded {
  name: "RequestAdded";
  args: {
    requestId: BN;
    duration: BN;
    value: BN;
    hashedRequest: string;
    recipient: string;
    0: BN;
    1: BN;
    2: BN;
    3: string;
    4: string;
  };
}

export interface RequestVoided {
  name: "RequestVoided";
  args: {
    requestId: BN;
    0: BN;
  };
}

export interface Unpaused {
  name: "Unpaused";
  args: {
    account: string;
    0: string;
  };
}

type AllEvents = Paused | RequestAdded | RequestVoided | Unpaused;

export interface CampaignRequestInstance extends Truffle.ContractInstance {
  campaignContract(txDetails?: Truffle.TransactionDetails): Promise<string>;

  campaignFactoryContract(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  campaignFactoryInterface(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  campaignInterface(txDetails?: Truffle.TransactionDetails): Promise<string>;

  currentRunningRequest(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  finalizedRequestCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Returns true if the contract is paused, and false otherwise.
   */
  paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  requestCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  requests(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: string;
    1: BN;
    2: BN;
    3: BN;
    4: BN;
    5: BN;
    6: string;
    7: boolean;
    8: boolean;
  }>;

  /**
   * Constructor
   * @param _campaign Address of campaign contract this contract belongs to
   * @param _campaignFactory Address of factory
   */
  __CampaignRequest_init: {
    (
      _campaignFactory: string,
      _campaign: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _campaignFactory: string,
      _campaign: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _campaignFactory: string,
      _campaign: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _campaignFactory: string,
      _campaign: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Creates a formal request to withdraw funds from user contributions called by the campagn manager Restricted unless target is met and deadline is expired
   * @param _duration Duration until users aren't able to vote on the request
   * @param _hashedRequest CID reference of the request on IPFS
   * @param _recipient Address where requested funds are deposited
   * @param _value Amount being requested by the campaign manager
   */
  createRequest: {
    (
      _recipient: string,
      _value: number | BN | string,
      _duration: number | BN | string,
      _hashedRequest: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _recipient: string,
      _value: number | BN | string,
      _duration: number | BN | string,
      _hashedRequest: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _recipient: string,
      _value: number | BN | string,
      _duration: number | BN | string,
      _hashedRequest: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _recipient: string,
      _value: number | BN | string,
      _duration: number | BN | string,
      _hashedRequest: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Renders a request void and useless
   * @param _requestId ID of request being voided
   */
  voidRequest: {
    (
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Finalizes vote on a request, called only from voting contract
   * @param _requestId ID of request being finalized
   * @param _support An integer of 0 for against, 1 for in-favor, and 2 for abstain
   */
  signRequestVote: {
    (
      _requestId: number | BN | string,
      _support: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _requestId: number | BN | string,
      _support: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _requestId: number | BN | string,
      _support: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _requestId: number | BN | string,
      _support: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Finalizes vote cancellation, called only from the voting contract
   * @param _requestId ID of request whose vote is being cancelled
   */
  cancelVoteSignature: {
    (
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Request finalization called only from the campaign contract
   * @param _requestId ID of request whose withdrawal is being finalized
   */
  signRequestFinalization: {
    (
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    campaignContract(txDetails?: Truffle.TransactionDetails): Promise<string>;

    campaignFactoryContract(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    campaignFactoryInterface(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    campaignInterface(txDetails?: Truffle.TransactionDetails): Promise<string>;

    currentRunningRequest(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    finalizedRequestCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    requestCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    requests(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: string;
      1: BN;
      2: BN;
      3: BN;
      4: BN;
      5: BN;
      6: string;
      7: boolean;
      8: boolean;
    }>;

    /**
     * Constructor
     * @param _campaign Address of campaign contract this contract belongs to
     * @param _campaignFactory Address of factory
     */
    __CampaignRequest_init: {
      (
        _campaignFactory: string,
        _campaign: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _campaignFactory: string,
        _campaign: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _campaignFactory: string,
        _campaign: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _campaignFactory: string,
        _campaign: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Creates a formal request to withdraw funds from user contributions called by the campagn manager Restricted unless target is met and deadline is expired
     * @param _duration Duration until users aren't able to vote on the request
     * @param _hashedRequest CID reference of the request on IPFS
     * @param _recipient Address where requested funds are deposited
     * @param _value Amount being requested by the campaign manager
     */
    createRequest: {
      (
        _recipient: string,
        _value: number | BN | string,
        _duration: number | BN | string,
        _hashedRequest: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _recipient: string,
        _value: number | BN | string,
        _duration: number | BN | string,
        _hashedRequest: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _recipient: string,
        _value: number | BN | string,
        _duration: number | BN | string,
        _hashedRequest: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _recipient: string,
        _value: number | BN | string,
        _duration: number | BN | string,
        _hashedRequest: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Renders a request void and useless
     * @param _requestId ID of request being voided
     */
    voidRequest: {
      (
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Finalizes vote on a request, called only from voting contract
     * @param _requestId ID of request being finalized
     * @param _support An integer of 0 for against, 1 for in-favor, and 2 for abstain
     */
    signRequestVote: {
      (
        _requestId: number | BN | string,
        _support: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _requestId: number | BN | string,
        _support: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _requestId: number | BN | string,
        _support: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _requestId: number | BN | string,
        _support: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Finalizes vote cancellation, called only from the voting contract
     * @param _requestId ID of request whose vote is being cancelled
     */
    cancelVoteSignature: {
      (
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Request finalization called only from the campaign contract
     * @param _requestId ID of request whose withdrawal is being finalized
     */
    signRequestFinalization: {
      (
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
