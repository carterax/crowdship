/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface CampaignFactoryContract
  extends Truffle.Contract<CampaignFactoryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CampaignFactoryInstance>;
}

export interface CampaignActiveToggle {
  name: "CampaignActiveToggle";
  args: {
    campaignId: BN;
    active: boolean;
    sender: string;
    0: BN;
    1: boolean;
    2: string;
  };
}

export interface CampaignApproval {
  name: "CampaignApproval";
  args: {
    campaignId: BN;
    approval: boolean;
    sender: string;
    0: BN;
    1: boolean;
    2: string;
  };
}

export interface CampaignCategoryChange {
  name: "CampaignCategoryChange";
  args: {
    campaignId: BN;
    newCategory: BN;
    sender: string;
    0: BN;
    1: BN;
    2: string;
  };
}

export interface CampaignDefaultCommissionUpdated {
  name: "CampaignDefaultCommissionUpdated";
  args: {
    commission: BN;
    0: BN;
  };
}

export interface CampaignDeployed {
  name: "CampaignDeployed";
  args: {
    campaignId: BN;
    factory: string;
    campaign: string;
    campaignRewards: string;
    userId: BN;
    category: BN;
    sender: string;
    0: BN;
    1: string;
    2: string;
    3: string;
    4: BN;
    5: BN;
    6: string;
  };
}

export interface CampaignFactoryCreated {
  name: "CampaignFactoryCreated";
  args: {
    campaignFactory: string;
    owner: string;
    factoryWallet: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface CampaignFeaturePaused {
  name: "CampaignFeaturePaused";
  args: {
    campaignId: BN;
    sender: string;
    0: BN;
    1: string;
  };
}

export interface CampaignFeatureUnpaused {
  name: "CampaignFeatureUnpaused";
  args: {
    campaignId: BN;
    timeLeft: BN;
    sender: string;
    0: BN;
    1: BN;
    2: string;
  };
}

export interface CampaignFeatured {
  name: "CampaignFeatured";
  args: {
    campaignId: BN;
    featurePackageId: BN;
    amount: BN;
    sender: string;
    0: BN;
    1: BN;
    2: BN;
    3: string;
  };
}

export interface CampaignTransactionConfigUpdated {
  name: "CampaignTransactionConfigUpdated";
  args: {
    prop: string;
    value: BN;
    0: string;
    1: BN;
  };
}

export interface CategoryAdded {
  name: "CategoryAdded";
  args: {
    categoryId: BN;
    active: boolean;
    sender: string;
    0: BN;
    1: boolean;
    2: string;
  };
}

export interface CategoryCommissionUpdated {
  name: "CategoryCommissionUpdated";
  args: {
    categoryId: BN;
    commission: BN;
    0: BN;
    1: BN;
  };
}

export interface CategoryModified {
  name: "CategoryModified";
  args: {
    categoryId: BN;
    active: boolean;
    sender: string;
    0: BN;
    1: boolean;
    2: string;
  };
}

export interface FactoryConfigUpdated {
  name: "FactoryConfigUpdated";
  args: {
    factoryWallet: string;
    campaignImplementation: string;
    campaignRewardsImplementation: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface FeaturePackageAdded {
  name: "FeaturePackageAdded";
  args: {
    packageId: BN;
    cost: BN;
    time: BN;
    sender: string;
    0: BN;
    1: BN;
    2: BN;
    3: string;
  };
}

export interface FeaturePackageDestroyed {
  name: "FeaturePackageDestroyed";
  args: {
    packageId: BN;
    sender: string;
    0: BN;
    1: string;
  };
}

export interface FeaturePackageModified {
  name: "FeaturePackageModified";
  args: {
    packageId: BN;
    cost: BN;
    time: BN;
    sender: string;
    0: BN;
    1: BN;
    2: BN;
    3: string;
  };
}

export interface Paused {
  name: "Paused";
  args: {
    account: string;
    0: string;
  };
}

export interface RoleAdminChanged {
  name: "RoleAdminChanged";
  args: {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface RoleGranted {
  name: "RoleGranted";
  args: {
    role: string;
    account: string;
    sender: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface RoleRevoked {
  name: "RoleRevoked";
  args: {
    role: string;
    account: string;
    sender: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface TokenAdded {
  name: "TokenAdded";
  args: {
    token: string;
    sender: string;
    0: string;
    1: string;
  };
}

export interface TokenApproval {
  name: "TokenApproval";
  args: {
    token: string;
    state: boolean;
    sender: string;
    0: string;
    1: boolean;
    2: string;
  };
}

export interface TokenRemoved {
  name: "TokenRemoved";
  args: {
    tokenId: BN;
    token: string;
    sender: string;
    0: BN;
    1: string;
    2: string;
  };
}

export interface Unpaused {
  name: "Unpaused";
  args: {
    account: string;
    0: string;
  };
}

export interface UserAdded {
  name: "UserAdded";
  args: {
    userId: BN;
    sender: string;
    0: BN;
    1: string;
  };
}

export interface UserApproval {
  name: "UserApproval";
  args: {
    userId: BN;
    approval: boolean;
    sender: string;
    0: BN;
    1: boolean;
    2: string;
  };
}

export interface UserRemoved {
  name: "UserRemoved";
  args: {
    userId: BN;
    sender: string;
    0: BN;
    1: string;
  };
}

type AllEvents =
  | CampaignActiveToggle
  | CampaignApproval
  | CampaignCategoryChange
  | CampaignDefaultCommissionUpdated
  | CampaignDeployed
  | CampaignFactoryCreated
  | CampaignFeaturePaused
  | CampaignFeatureUnpaused
  | CampaignFeatured
  | CampaignTransactionConfigUpdated
  | CategoryAdded
  | CategoryCommissionUpdated
  | CategoryModified
  | FactoryConfigUpdated
  | FeaturePackageAdded
  | FeaturePackageDestroyed
  | FeaturePackageModified
  | Paused
  | RoleAdminChanged
  | RoleGranted
  | RoleRevoked
  | TokenAdded
  | TokenApproval
  | TokenRemoved
  | Unpaused
  | UserAdded
  | UserApproval
  | UserRemoved;

export interface CampaignFactoryInstance extends Truffle.ContractInstance {
  DEFAULT_ADMIN_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MANAGE_CAMPAIGNS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MANAGE_CATEGORIES(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MANAGE_USERS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  approvedCampaignTransactionConfig(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  campaignCategories(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: boolean; 4: boolean }>;

  campaignCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  campaignImplementation(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  campaignRevenueFromCommissions(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  campaignRevenueFromFeatures(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  campaignRewardsImplementation(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  campaignToID(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  campaignToOwner(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  campaignTransactionConfig(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  campaignTransactionConfigList(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  categoryCommission(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  categoryCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  deployedCampaigns(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: string;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: BN;
    6: BN;
    7: boolean;
    8: boolean;
    9: boolean;
  }>;

  factoryRevenue(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  factoryWallet(txDetails?: Truffle.TransactionDetails): Promise<string>;

  featurePackageCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  featurePackages(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: boolean }>;

  featuredCampaignIsPaused(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
   */
  getRoleAdmin(
    role: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
   */
  grantRole: {
    (
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns `true` if `account` has been granted `role`.
   */
  hasRole(
    role: string,
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Returns true if the contract is paused, and false otherwise.
   */
  paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  pausedFeaturedCampaignTimeLeft(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
   */
  renounceRole: {
    (
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
   */
  revokeRole: {
    (
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  root(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * See {IERC165-supportsInterface}.
   */
  supportsInterface(
    interfaceId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  tokenInList(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  tokenList(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  tokensApproved(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  userCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  userID(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  users(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: BN; 2: BN; 3: boolean; 4: boolean }>;

  /**
   * Contructor
   * @param _wallet Address where all revenue gets deposited
   */
  __CampaignFactory_init: {
    (
      _wallet: string,
      _root: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _wallet: string,
      _root: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _wallet: string,
      _root: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _wallet: string,
      _root: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Set Factory controlled values dictating how campaigns should run
   * @param _campaignImplementation Address of base contract to deploy minimal proxies to campaigns
   * @param _campaignRewardsImplementation Address of base contract to deploy minimal proxies to campaign rewards
   * @param _wallet Address where all revenue gets deposited
   */
  setFactoryConfig: {
    (
      _wallet: string,
      _campaignImplementation: string,
      _campaignRewardsImplementation: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _wallet: string,
      _campaignImplementation: string,
      _campaignRewardsImplementation: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _wallet: string,
      _campaignImplementation: string,
      _campaignRewardsImplementation: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _wallet: string,
      _campaignImplementation: string,
      _campaignRewardsImplementation: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Adds a new transaction setting
   * @param _prop Setting Key
   */
  addFactoryTransactionConfig: {
    (_prop: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_prop: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _prop: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _prop: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Set Factory controlled values dictating how campaign deployments should run
   * @param _prop Setting Key
   * @param _value Setting Value
   */
  setCampaignTransactionConfig: {
    (
      _prop: string,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _prop: string,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _prop: string,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _prop: string,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Sets default commission on all request finalization
   * @param _denominator Fraction Fee percentage on request finalization
   * @param _numerator Fraction Fee percentage on request finalization
   */
  setDefaultCommission: {
    (
      _numerator: number | BN | string,
      _denominator: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _numerator: number | BN | string,
      _denominator: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _numerator: number | BN | string,
      _denominator: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _numerator: number | BN | string,
      _denominator: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Sets commission per category basis
   * @param _categoryId ID of category
   * @param _denominator Fraction Fee percentage on request finalization in campaign per category `defaultCommission` will be utilized if value is `0`
   * @param _numerator Fraction Fee percentage on request finalization in campaign per category `defaultCommission` will be utilized if value is `0`
   */
  setCategoryCommission: {
    (
      _categoryId: number | BN | string,
      _numerator: number | BN | string,
      _denominator: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _categoryId: number | BN | string,
      _numerator: number | BN | string,
      _denominator: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _categoryId: number | BN | string,
      _numerator: number | BN | string,
      _denominator: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _categoryId: number | BN | string,
      _numerator: number | BN | string,
      _denominator: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Adds a token that needs approval before being accepted
   * @param _token Address of the token
   */
  addToken: {
    (_token: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_token: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Removes a token from the list of accepted tokens and tokens in list
   * @param _token Address of the token
   * @param _tokenId ID of the token
   */
  removeToken: {
    (
      _tokenId: number | BN | string,
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenId: number | BN | string,
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenId: number | BN | string,
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenId: number | BN | string,
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Sets if a token is accepted or not provided it's in the list of token
   * @param _state Indicates if the token is approved or not
   * @param _token Address of the token
   */
  toggleAcceptedToken: {
    (
      _token: string,
      _state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _token: string,
      _state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string,
      _state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string,
      _state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Add an account to the role. Restricted to admins.
   * @param _account Address of user being assigned role
   * @param _role Role being assigned
   */
  addRole: {
    (
      _account: string,
      _role: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _account: string,
      _role: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _account: string,
      _role: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _account: string,
      _role: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Remove an account from the role. Restricted to admins.
   * @param _account Address of user whose role is being removed
   * @param _role Role being removed
   */
  removeRole: {
    (
      _account: string,
      _role: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _account: string,
      _role: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _account: string,
      _role: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _account: string,
      _role: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Remove oneself from the admin role.
   */
  renounceAdmin: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Checks if a user can manage a campaign. Called but not restricted to external campaign proxies
   * @param _user Address of user
   */
  canManageCampaigns(
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Retrieves campaign commission fees. Restricted to campaign owner.
   * @param _amount Amount transfered and collected by factory from campaign request finalization
   * @param _campaign Address of campaign instance
   */
  receiveCampaignCommission: {
    (
      _campaign: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _campaign: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _campaign: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _campaign: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Keep track of user addresses. KYC purpose
   */
  signUp: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Approves or disapproves a user
   * @param _approval Indicates if the user will be approved or not
   * @param _userId ID of the user
   */
  toggleUserApproval: {
    (
      _userId: number | BN | string,
      _approval: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _userId: number | BN | string,
      _approval: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _userId: number | BN | string,
      _approval: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _userId: number | BN | string,
      _approval: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Deletes a user
   * @param _userId ID of the user
   */
  destroyUser: {
    (
      _userId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _userId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _userId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _userId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Deploys and tracks a new campagign
   * @param _categoryId ID of category campaign deployer specifies
   */
  createCampaign: {
    (
      _categoryId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _categoryId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _categoryId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _categoryId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Approves or disapproves a campaign. Restricted to campaign managers from factory
   * @param _approval Indicates if the campaign will be approved or not. Affects campaign listing and transactions
   * @param _campaignId ID of the campaign
   */
  toggleCampaignApproval: {
    (
      _campaignId: number | BN | string,
      _approval: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _campaignId: number | BN | string,
      _approval: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _campaignId: number | BN | string,
      _approval: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _campaignId: number | BN | string,
      _approval: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Temporal campaign deactivation. Restricted to campaign managers or campaign managers from factory
   * @param _active Indicates if the campaign will be active or not.  Affects campaign listing and transactions
   * @param _campaignId ID of the campaign
   */
  toggleCampaignActive: {
    (
      _campaignId: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _campaignId: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _campaignId: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _campaignId: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Modifies a campaign's category.
   * @param _campaignId ID of the campaign
   * @param _newCategoryId ID of the category being switched to
   */
  modifyCampaignCategory: {
    (
      _campaignId: number | BN | string,
      _newCategoryId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _campaignId: number | BN | string,
      _newCategoryId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _campaignId: number | BN | string,
      _newCategoryId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _campaignId: number | BN | string,
      _newCategoryId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Purchases time for which the specified campaign will be featured. Restricted to
   * @param _campaignId ID of the campaign
   * @param _token Address of token used to purchase feature package
   */
  featureCampaign: {
    (
      _campaignId: number | BN | string,
      _featurePackageId: number | BN | string,
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _campaignId: number | BN | string,
      _featurePackageId: number | BN | string,
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _campaignId: number | BN | string,
      _featurePackageId: number | BN | string,
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _campaignId: number | BN | string,
      _featurePackageId: number | BN | string,
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Pauses campaign feature time storing what's left for later use. Restricted to campaign owner or manager
   * @param _campaignId ID of the campaign
   */
  pauseCampaignFeatured: {
    (
      _campaignId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _campaignId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _campaignId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _campaignId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Resumes campaign feature time
   * @param _campaignId ID of the campaign
   */
  unpauseCampaignFeatured: {
    (
      _campaignId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _campaignId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _campaignId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _campaignId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Creates a category
   * @param _active Indicates if a category is active allowing for campaigns to be assigned to it
   */
  createCategory: {
    (_active: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Modifies details about a category
   * @param _active Indicates if a category is active allowing for campaigns to be assigned to it
   * @param _categoryId ID of the category
   */
  modifyCategory: {
    (
      _categoryId: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _categoryId: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _categoryId: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _categoryId: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Creates a feature package purchased by campaig owners to feature their campaigns
   * @param _cost Cost of purchasing this feature package
   * @param _time How long a campaign will be featured for
   */
  createFeaturePackage: {
    (
      _cost: number | BN | string,
      _time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _cost: number | BN | string,
      _time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _cost: number | BN | string,
      _time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cost: number | BN | string,
      _time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Modifies details about a feature package
   * @param _cost Cost of purchasing this feature package
   * @param _packageId ID of feature package
   * @param _time How long a campaign will be featured for
   */
  modifyFeaturedPackage: {
    (
      _packageId: number | BN | string,
      _cost: number | BN | string,
      _time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _packageId: number | BN | string,
      _cost: number | BN | string,
      _time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _packageId: number | BN | string,
      _cost: number | BN | string,
      _time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _packageId: number | BN | string,
      _cost: number | BN | string,
      _time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Deletes a feature package
   * @param _packageId ID of feature package
   */
  destroyFeaturedPackage: {
    (
      _packageId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _packageId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _packageId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _packageId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Unpauses the factory, transactions in the factory resumes per usual
   */
  unpauseCampaign: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Pauses the factory, halts all transactions in the factory
   */
  pauseCampaign: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    DEFAULT_ADMIN_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

    MANAGE_CAMPAIGNS(txDetails?: Truffle.TransactionDetails): Promise<string>;

    MANAGE_CATEGORIES(txDetails?: Truffle.TransactionDetails): Promise<string>;

    MANAGE_USERS(txDetails?: Truffle.TransactionDetails): Promise<string>;

    approvedCampaignTransactionConfig(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    campaignCategories(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: boolean; 4: boolean }>;

    campaignCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    campaignImplementation(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    campaignRevenueFromCommissions(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    campaignRevenueFromFeatures(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    campaignRewardsImplementation(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    campaignToID(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    campaignToOwner(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    campaignTransactionConfig(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    campaignTransactionConfigList(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    categoryCommission(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    categoryCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    deployedCampaigns(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: string;
      1: string;
      2: string;
      3: BN;
      4: BN;
      5: BN;
      6: BN;
      7: boolean;
      8: boolean;
      9: boolean;
    }>;

    factoryRevenue(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    factoryWallet(txDetails?: Truffle.TransactionDetails): Promise<string>;

    featurePackageCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    featurePackages(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: boolean }>;

    featuredCampaignIsPaused(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole: {
      (
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    pausedFeaturedCampaignTimeLeft(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole: {
      (
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole: {
      (
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    root(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    tokenInList(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    tokenList(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    tokensApproved(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    userCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    userID(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

    users(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: BN; 2: BN; 3: boolean; 4: boolean }>;

    /**
     * Contructor
     * @param _wallet Address where all revenue gets deposited
     */
    __CampaignFactory_init: {
      (
        _wallet: string,
        _root: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _wallet: string,
        _root: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _wallet: string,
        _root: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _wallet: string,
        _root: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Set Factory controlled values dictating how campaigns should run
     * @param _campaignImplementation Address of base contract to deploy minimal proxies to campaigns
     * @param _campaignRewardsImplementation Address of base contract to deploy minimal proxies to campaign rewards
     * @param _wallet Address where all revenue gets deposited
     */
    setFactoryConfig: {
      (
        _wallet: string,
        _campaignImplementation: string,
        _campaignRewardsImplementation: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _wallet: string,
        _campaignImplementation: string,
        _campaignRewardsImplementation: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _wallet: string,
        _campaignImplementation: string,
        _campaignRewardsImplementation: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _wallet: string,
        _campaignImplementation: string,
        _campaignRewardsImplementation: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Adds a new transaction setting
     * @param _prop Setting Key
     */
    addFactoryTransactionConfig: {
      (_prop: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _prop: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _prop: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _prop: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Set Factory controlled values dictating how campaign deployments should run
     * @param _prop Setting Key
     * @param _value Setting Value
     */
    setCampaignTransactionConfig: {
      (
        _prop: string,
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _prop: string,
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _prop: string,
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _prop: string,
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Sets default commission on all request finalization
     * @param _denominator Fraction Fee percentage on request finalization
     * @param _numerator Fraction Fee percentage on request finalization
     */
    setDefaultCommission: {
      (
        _numerator: number | BN | string,
        _denominator: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _numerator: number | BN | string,
        _denominator: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _numerator: number | BN | string,
        _denominator: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _numerator: number | BN | string,
        _denominator: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Sets commission per category basis
     * @param _categoryId ID of category
     * @param _denominator Fraction Fee percentage on request finalization in campaign per category `defaultCommission` will be utilized if value is `0`
     * @param _numerator Fraction Fee percentage on request finalization in campaign per category `defaultCommission` will be utilized if value is `0`
     */
    setCategoryCommission: {
      (
        _categoryId: number | BN | string,
        _numerator: number | BN | string,
        _denominator: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _categoryId: number | BN | string,
        _numerator: number | BN | string,
        _denominator: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _categoryId: number | BN | string,
        _numerator: number | BN | string,
        _denominator: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _categoryId: number | BN | string,
        _numerator: number | BN | string,
        _denominator: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Adds a token that needs approval before being accepted
     * @param _token Address of the token
     */
    addToken: {
      (_token: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Removes a token from the list of accepted tokens and tokens in list
     * @param _token Address of the token
     * @param _tokenId ID of the token
     */
    removeToken: {
      (
        _tokenId: number | BN | string,
        _token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenId: number | BN | string,
        _token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenId: number | BN | string,
        _token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenId: number | BN | string,
        _token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Sets if a token is accepted or not provided it's in the list of token
     * @param _state Indicates if the token is approved or not
     * @param _token Address of the token
     */
    toggleAcceptedToken: {
      (
        _token: string,
        _state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _token: string,
        _state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _token: string,
        _state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _token: string,
        _state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Add an account to the role. Restricted to admins.
     * @param _account Address of user being assigned role
     * @param _role Role being assigned
     */
    addRole: {
      (
        _account: string,
        _role: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _account: string,
        _role: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _account: string,
        _role: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _account: string,
        _role: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Remove an account from the role. Restricted to admins.
     * @param _account Address of user whose role is being removed
     * @param _role Role being removed
     */
    removeRole: {
      (
        _account: string,
        _role: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _account: string,
        _role: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _account: string,
        _role: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _account: string,
        _role: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Remove oneself from the admin role.
     */
    renounceAdmin: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Checks if a user can manage a campaign. Called but not restricted to external campaign proxies
     * @param _user Address of user
     */
    canManageCampaigns(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Retrieves campaign commission fees. Restricted to campaign owner.
     * @param _amount Amount transfered and collected by factory from campaign request finalization
     * @param _campaign Address of campaign instance
     */
    receiveCampaignCommission: {
      (
        _campaign: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _campaign: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _campaign: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _campaign: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Keep track of user addresses. KYC purpose
     */
    signUp: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Approves or disapproves a user
     * @param _approval Indicates if the user will be approved or not
     * @param _userId ID of the user
     */
    toggleUserApproval: {
      (
        _userId: number | BN | string,
        _approval: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _userId: number | BN | string,
        _approval: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _userId: number | BN | string,
        _approval: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _userId: number | BN | string,
        _approval: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Deletes a user
     * @param _userId ID of the user
     */
    destroyUser: {
      (
        _userId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _userId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _userId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _userId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Deploys and tracks a new campagign
     * @param _categoryId ID of category campaign deployer specifies
     */
    createCampaign: {
      (
        _categoryId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _categoryId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _categoryId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _categoryId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Approves or disapproves a campaign. Restricted to campaign managers from factory
     * @param _approval Indicates if the campaign will be approved or not. Affects campaign listing and transactions
     * @param _campaignId ID of the campaign
     */
    toggleCampaignApproval: {
      (
        _campaignId: number | BN | string,
        _approval: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _campaignId: number | BN | string,
        _approval: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _campaignId: number | BN | string,
        _approval: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _campaignId: number | BN | string,
        _approval: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Temporal campaign deactivation. Restricted to campaign managers or campaign managers from factory
     * @param _active Indicates if the campaign will be active or not.  Affects campaign listing and transactions
     * @param _campaignId ID of the campaign
     */
    toggleCampaignActive: {
      (
        _campaignId: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _campaignId: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _campaignId: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _campaignId: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Modifies a campaign's category.
     * @param _campaignId ID of the campaign
     * @param _newCategoryId ID of the category being switched to
     */
    modifyCampaignCategory: {
      (
        _campaignId: number | BN | string,
        _newCategoryId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _campaignId: number | BN | string,
        _newCategoryId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _campaignId: number | BN | string,
        _newCategoryId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _campaignId: number | BN | string,
        _newCategoryId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Purchases time for which the specified campaign will be featured. Restricted to
     * @param _campaignId ID of the campaign
     * @param _token Address of token used to purchase feature package
     */
    featureCampaign: {
      (
        _campaignId: number | BN | string,
        _featurePackageId: number | BN | string,
        _token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _campaignId: number | BN | string,
        _featurePackageId: number | BN | string,
        _token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _campaignId: number | BN | string,
        _featurePackageId: number | BN | string,
        _token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _campaignId: number | BN | string,
        _featurePackageId: number | BN | string,
        _token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Pauses campaign feature time storing what's left for later use. Restricted to campaign owner or manager
     * @param _campaignId ID of the campaign
     */
    pauseCampaignFeatured: {
      (
        _campaignId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _campaignId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _campaignId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _campaignId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Resumes campaign feature time
     * @param _campaignId ID of the campaign
     */
    unpauseCampaignFeatured: {
      (
        _campaignId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _campaignId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _campaignId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _campaignId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Creates a category
     * @param _active Indicates if a category is active allowing for campaigns to be assigned to it
     */
    createCategory: {
      (_active: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Modifies details about a category
     * @param _active Indicates if a category is active allowing for campaigns to be assigned to it
     * @param _categoryId ID of the category
     */
    modifyCategory: {
      (
        _categoryId: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _categoryId: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _categoryId: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _categoryId: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Creates a feature package purchased by campaig owners to feature their campaigns
     * @param _cost Cost of purchasing this feature package
     * @param _time How long a campaign will be featured for
     */
    createFeaturePackage: {
      (
        _cost: number | BN | string,
        _time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _cost: number | BN | string,
        _time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _cost: number | BN | string,
        _time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _cost: number | BN | string,
        _time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Modifies details about a feature package
     * @param _cost Cost of purchasing this feature package
     * @param _packageId ID of feature package
     * @param _time How long a campaign will be featured for
     */
    modifyFeaturedPackage: {
      (
        _packageId: number | BN | string,
        _cost: number | BN | string,
        _time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _packageId: number | BN | string,
        _cost: number | BN | string,
        _time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _packageId: number | BN | string,
        _cost: number | BN | string,
        _time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _packageId: number | BN | string,
        _cost: number | BN | string,
        _time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Deletes a feature package
     * @param _packageId ID of feature package
     */
    destroyFeaturedPackage: {
      (
        _packageId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _packageId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _packageId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _packageId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Unpauses the factory, transactions in the factory resumes per usual
     */
    unpauseCampaign: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Pauses the factory, halts all transactions in the factory
     */
    pauseCampaign: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
