/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface CampaignFactoryContract
  extends Truffle.Contract<CampaignFactoryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CampaignFactoryInstance>;
}

export interface CampaignActivation {
  name: "CampaignActivation";
  args: {
    campaign: string;
    0: string;
  };
}

export interface CampaignApproval {
  name: "CampaignApproval";
  args: {
    campaign: string;
    0: string;
  };
}

export interface CampaignCategoryChange {
  name: "CampaignCategoryChange";
  args: {
    campaign: string;
    newCategory: BN;
    0: string;
    1: BN;
  };
}

export interface CampaignDefaultCommissionUpdated {
  name: "CampaignDefaultCommissionUpdated";
  args: {
    commission: BN;
    0: BN;
  };
}

export interface CampaignDeployed {
  name: "CampaignDeployed";
  args: {
    factory: string;
    campaign: string;
    campaignRewards: string;
    campaignRequests: string;
    campaignVotes: string;
    category: BN;
    approved: boolean;
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
    5: BN;
    6: boolean;
  };
}

export interface CampaignImplementationUpdated {
  name: "CampaignImplementationUpdated";
  args: {
    campaignImplementation: string;
    0: string;
  };
}

export interface CampaignRequestImplementationUpdated {
  name: "CampaignRequestImplementationUpdated";
  args: {
    campaignRequestImplementation: string;
    0: string;
  };
}

export interface CampaignRewardImplementationUpdated {
  name: "CampaignRewardImplementationUpdated";
  args: {
    campaignRewardImplementation: string;
    0: string;
  };
}

export interface CampaignTransactionConfigUpdated {
  name: "CampaignTransactionConfigUpdated";
  args: {
    prop: string;
    value: BN;
    0: string;
    1: BN;
  };
}

export interface CampaignVoteImplementationUpdated {
  name: "CampaignVoteImplementationUpdated";
  args: {
    campaignVoteImplementation: string;
    0: string;
  };
}

export interface CategoryAdded {
  name: "CategoryAdded";
  args: {
    categoryId: BN;
    active: boolean;
    0: BN;
    1: boolean;
  };
}

export interface CategoryCommissionUpdated {
  name: "CategoryCommissionUpdated";
  args: {
    categoryId: BN;
    commission: BN;
    0: BN;
    1: BN;
  };
}

export interface CategoryModified {
  name: "CategoryModified";
  args: {
    categoryId: BN;
    active: boolean;
    0: BN;
    1: boolean;
  };
}

export interface Paused {
  name: "Paused";
  args: {
    account: string;
    0: string;
  };
}

export interface TokenAdded {
  name: "TokenAdded";
  args: {
    token: string;
    0: string;
  };
}

export interface TokenApproval {
  name: "TokenApproval";
  args: {
    token: string;
    state: boolean;
    0: string;
    1: boolean;
  };
}

export interface TrusteeAdded {
  name: "TrusteeAdded";
  args: {
    trusteeId: BN;
    trusteeAddress: string;
    0: BN;
    1: string;
  };
}

export interface TrusteeRemoved {
  name: "TrusteeRemoved";
  args: {
    trusteeId: BN;
    trusteeAddress: string;
    0: BN;
    1: string;
  };
}

export interface Unpaused {
  name: "Unpaused";
  args: {
    account: string;
    0: string;
  };
}

export interface UserAdded {
  name: "UserAdded";
  args: {
    userId: BN;
    0: BN;
  };
}

export interface UserApproval {
  name: "UserApproval";
  args: {
    userId: BN;
    user: string;
    approval: boolean;
    0: BN;
    1: string;
    2: boolean;
  };
}

type AllEvents =
  | CampaignActivation
  | CampaignApproval
  | CampaignCategoryChange
  | CampaignDefaultCommissionUpdated
  | CampaignDeployed
  | CampaignImplementationUpdated
  | CampaignRequestImplementationUpdated
  | CampaignRewardImplementationUpdated
  | CampaignTransactionConfigUpdated
  | CampaignVoteImplementationUpdated
  | CategoryAdded
  | CategoryCommissionUpdated
  | CategoryModified
  | Paused
  | TokenAdded
  | TokenApproval
  | TrusteeAdded
  | TrusteeRemoved
  | Unpaused
  | UserAdded
  | UserApproval;

export interface CampaignFactoryInstance extends Truffle.ContractInstance {
  approvedCampaignTransactionConfig(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  campaignCategories(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: boolean; 4: boolean }>;

  campaignCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  campaignFactoryAddress(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  campaignImplementation(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  campaignRequestsImplementation(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  campaignRevenueFromCommissions(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  campaignRewardsImplementation(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  campaignToID(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  campaignToOwner(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  campaignTransactionConfig(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  campaignTransactionConfigList(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  campaignVotesImplementation(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  categoryCommission(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  categoryCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  deployedCampaigns(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: string;
    1: string;
    2: BN;
    3: BN;
    4: BN;
    5: boolean;
    6: boolean;
  }>;

  factoryRevenue(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  governance(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isUserTrustee(
    arg0: string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Returns true if the contract is paused, and false otherwise.
   */
  paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  tokenInList(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  tokensApproved(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  trustees(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: string; 2: BN; 3: boolean }>;

  userCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  userID(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  userTrusteeCount(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  users(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: BN; 2: BN; 3: boolean; 4: boolean }>;

  /**
   * Contructor
   * @param _governance Address where all revenue gets deposited
   */
  __CampaignFactory_init: {
    (
      _governance: string,
      _config: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _governance: string,
      _config: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _governance: string,
      _config: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _governance: string,
      _config: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Updates campaign implementation address
   * @param _campaignImplementation Address of base contract to deploy minimal proxies
   */
  setCampaignImplementation: {
    (
      _campaignImplementation: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _campaignImplementation: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _campaignImplementation: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _campaignImplementation: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Updates campaign reward implementation address
   * @param _campaignRewardsImplementation Address of base contract to deploy minimal proxies
   */
  setCampaignRewardImplementation: {
    (
      _campaignRewardsImplementation: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _campaignRewardsImplementation: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _campaignRewardsImplementation: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _campaignRewardsImplementation: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Updates campaign request implementation address
   * @param _campaignRequestsImplementation Address of base contract to deploy minimal proxies
   */
  setCampaignRequestImplementation: {
    (
      _campaignRequestsImplementation: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _campaignRequestsImplementation: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _campaignRequestsImplementation: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _campaignRequestsImplementation: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Updates campaign request implementation address
   * @param _campaignVotesImplementation Address of base contract to deploy minimal proxies
   */
  setCampaignVoteImplementation: {
    (
      _campaignVotesImplementation: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _campaignVotesImplementation: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _campaignVotesImplementation: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _campaignVotesImplementation: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Adds a new transaction setting
   * @param _prop Setting Key
   */
  addFactoryTransactionConfig: {
    (_prop: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_prop: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _prop: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _prop: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Set Factory controlled values dictating how campaign deployments should run
   * @param _prop Setting Key
   * @param _value Setting Value
   */
  setCampaignTransactionConfig: {
    (
      _prop: string,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _prop: string,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _prop: string,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _prop: string,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Sets default commission on all request finalization
   * @param _denominator Fraction Fee percentage on request finalization
   * @param _numerator Fraction Fee percentage on request finalization
   */
  setDefaultCommission: {
    (
      _numerator: number | BN | string,
      _denominator: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _numerator: number | BN | string,
      _denominator: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _numerator: number | BN | string,
      _denominator: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _numerator: number | BN | string,
      _denominator: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Sets commission per category basis
   * @param _categoryId ID of category
   * @param _denominator Fraction Fee percentage on request finalization in campaign per category `defaultCommission` will be utilized if value is `0`
   * @param _numerator Fraction Fee percentage on request finalization in campaign per category `defaultCommission` will be utilized if value is `0`
   */
  setCategoryCommission: {
    (
      _categoryId: number | BN | string,
      _numerator: number | BN | string,
      _denominator: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _categoryId: number | BN | string,
      _numerator: number | BN | string,
      _denominator: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _categoryId: number | BN | string,
      _numerator: number | BN | string,
      _denominator: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _categoryId: number | BN | string,
      _numerator: number | BN | string,
      _denominator: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Adds a token that needs approval before being accepted
   * @param _token Address of the token
   */
  addToken: {
    (_token: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_token: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Sets if a token is accepted or not provided it's in the list of token
   * @param _state Indicates if the token is approved or not
   * @param _token Address of the token
   */
  toggleAcceptedToken: {
    (
      _token: string,
      _state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _token: string,
      _state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string,
      _state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string,
      _state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Checks if a user can manage a campaign. Called but not restricted to external campaign proxies
   * @param _user Address of user
   */
  canManageCampaigns(
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Retrieves campaign commission fees. Restricted to campaign owner.
   * @param _amount Amount transfered and collected by factory from campaign request finalization
   * @param _campaign Address of campaign instance
   */
  receiveCampaignCommission: {
    (
      _campaign: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _campaign: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _campaign: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _campaign: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Keep track of user addresses. sybil resistance purpose
   */
  signUp: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Ensures user specified is verified
   * @param _user Address of user
   */
  userIsVerified(
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Trustees are people the user can add to help recover their account in the case they lose access to ther wallets
   * @param _trustee Address of the trustee, must be a verified user
   */
  addTrustee: {
    (_trustee: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _trustee: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _trustee: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _trustee: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Removes a trustee from users list of trustees
   * @param _trusteeId Address of the trustee
   */
  removeTrustee: {
    (
      _trusteeId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _trusteeId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _trusteeId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _trusteeId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Approves or disapproves a user
   * @param _approval Indicates if the user will be approved or not
   * @param _userId ID of the user
   */
  toggleUserApproval: {
    (
      _userId: number | BN | string,
      _approval: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _userId: number | BN | string,
      _approval: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _userId: number | BN | string,
      _approval: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _userId: number | BN | string,
      _approval: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Deploys and tracks a new campagign
   * @param _categoryId ID of category campaign deployer specifies
   */
  createCampaign: {
    (
      _categoryId: number | BN | string,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _categoryId: number | BN | string,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _categoryId: number | BN | string,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _categoryId: number | BN | string,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Activates a campaign. Activating a campaign simply makes the campaign available for listing  on crowdship, events will be stored on thegraph activated or not, Restricted to campaign managers
   * @param _campaignId ID of the campaign
   */
  activateCampaign: {
    (
      _campaignId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _campaignId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _campaignId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _campaignId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Approves a campaign. By approving your campaign all events will  stored on thegraph and listed on crowdship, Restricted to campaign managers
   * @param _campaignId ID of the campaign
   */
  approveCampaign: {
    (
      _campaignId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _campaignId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _campaignId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _campaignId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Modifies a campaign's category.
   * @param _campaignId ID of the campaign
   * @param _newCategoryId ID of the category being switched to
   */
  modifyCampaignCategory: {
    (
      _campaignId: number | BN | string,
      _newCategoryId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _campaignId: number | BN | string,
      _newCategoryId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _campaignId: number | BN | string,
      _newCategoryId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _campaignId: number | BN | string,
      _newCategoryId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Creates a category
   * @param _active Indicates if a category is active allowing for campaigns to be assigned to it
   */
  createCategory: {
    (_active: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Modifies details about a category
   * @param _active Indicates if a category is active allowing for campaigns to be assigned to it
   * @param _categoryId ID of the category
   */
  modifyCategory: {
    (
      _categoryId: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _categoryId: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _categoryId: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _categoryId: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Unpauses the factory, transactions in the factory resumes per usual
   */
  unpauseCampaign: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Pauses the factory, halts all transactions in the factory
   */
  pauseCampaign: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    approvedCampaignTransactionConfig(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    campaignCategories(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: boolean; 4: boolean }>;

    campaignCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    campaignFactoryAddress(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    campaignImplementation(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    campaignRequestsImplementation(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    campaignRevenueFromCommissions(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    campaignRewardsImplementation(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    campaignToID(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    campaignToOwner(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    campaignTransactionConfig(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    campaignTransactionConfigList(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    campaignVotesImplementation(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    categoryCommission(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    categoryCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    deployedCampaigns(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: string;
      1: string;
      2: BN;
      3: BN;
      4: BN;
      5: boolean;
      6: boolean;
    }>;

    factoryRevenue(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    governance(txDetails?: Truffle.TransactionDetails): Promise<string>;

    isUserTrustee(
      arg0: string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    tokenInList(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    tokensApproved(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    trustees(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string; 2: BN; 3: boolean }>;

    userCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    userID(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

    userTrusteeCount(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    users(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: BN; 2: BN; 3: boolean; 4: boolean }>;

    /**
     * Contructor
     * @param _governance Address where all revenue gets deposited
     */
    __CampaignFactory_init: {
      (
        _governance: string,
        _config: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _governance: string,
        _config: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _governance: string,
        _config: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _governance: string,
        _config: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Updates campaign implementation address
     * @param _campaignImplementation Address of base contract to deploy minimal proxies
     */
    setCampaignImplementation: {
      (
        _campaignImplementation: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _campaignImplementation: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _campaignImplementation: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _campaignImplementation: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Updates campaign reward implementation address
     * @param _campaignRewardsImplementation Address of base contract to deploy minimal proxies
     */
    setCampaignRewardImplementation: {
      (
        _campaignRewardsImplementation: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _campaignRewardsImplementation: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _campaignRewardsImplementation: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _campaignRewardsImplementation: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Updates campaign request implementation address
     * @param _campaignRequestsImplementation Address of base contract to deploy minimal proxies
     */
    setCampaignRequestImplementation: {
      (
        _campaignRequestsImplementation: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _campaignRequestsImplementation: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _campaignRequestsImplementation: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _campaignRequestsImplementation: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Updates campaign request implementation address
     * @param _campaignVotesImplementation Address of base contract to deploy minimal proxies
     */
    setCampaignVoteImplementation: {
      (
        _campaignVotesImplementation: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _campaignVotesImplementation: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _campaignVotesImplementation: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _campaignVotesImplementation: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Adds a new transaction setting
     * @param _prop Setting Key
     */
    addFactoryTransactionConfig: {
      (_prop: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _prop: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _prop: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _prop: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Set Factory controlled values dictating how campaign deployments should run
     * @param _prop Setting Key
     * @param _value Setting Value
     */
    setCampaignTransactionConfig: {
      (
        _prop: string,
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _prop: string,
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _prop: string,
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _prop: string,
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Sets default commission on all request finalization
     * @param _denominator Fraction Fee percentage on request finalization
     * @param _numerator Fraction Fee percentage on request finalization
     */
    setDefaultCommission: {
      (
        _numerator: number | BN | string,
        _denominator: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _numerator: number | BN | string,
        _denominator: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _numerator: number | BN | string,
        _denominator: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _numerator: number | BN | string,
        _denominator: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Sets commission per category basis
     * @param _categoryId ID of category
     * @param _denominator Fraction Fee percentage on request finalization in campaign per category `defaultCommission` will be utilized if value is `0`
     * @param _numerator Fraction Fee percentage on request finalization in campaign per category `defaultCommission` will be utilized if value is `0`
     */
    setCategoryCommission: {
      (
        _categoryId: number | BN | string,
        _numerator: number | BN | string,
        _denominator: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _categoryId: number | BN | string,
        _numerator: number | BN | string,
        _denominator: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _categoryId: number | BN | string,
        _numerator: number | BN | string,
        _denominator: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _categoryId: number | BN | string,
        _numerator: number | BN | string,
        _denominator: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Adds a token that needs approval before being accepted
     * @param _token Address of the token
     */
    addToken: {
      (_token: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Sets if a token is accepted or not provided it's in the list of token
     * @param _state Indicates if the token is approved or not
     * @param _token Address of the token
     */
    toggleAcceptedToken: {
      (
        _token: string,
        _state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _token: string,
        _state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _token: string,
        _state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _token: string,
        _state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Checks if a user can manage a campaign. Called but not restricted to external campaign proxies
     * @param _user Address of user
     */
    canManageCampaigns(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Retrieves campaign commission fees. Restricted to campaign owner.
     * @param _amount Amount transfered and collected by factory from campaign request finalization
     * @param _campaign Address of campaign instance
     */
    receiveCampaignCommission: {
      (
        _campaign: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _campaign: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _campaign: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _campaign: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Keep track of user addresses. sybil resistance purpose
     */
    signUp: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Ensures user specified is verified
     * @param _user Address of user
     */
    userIsVerified(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Trustees are people the user can add to help recover their account in the case they lose access to ther wallets
     * @param _trustee Address of the trustee, must be a verified user
     */
    addTrustee: {
      (_trustee: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _trustee: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _trustee: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _trustee: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Removes a trustee from users list of trustees
     * @param _trusteeId Address of the trustee
     */
    removeTrustee: {
      (
        _trusteeId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _trusteeId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _trusteeId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _trusteeId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Approves or disapproves a user
     * @param _approval Indicates if the user will be approved or not
     * @param _userId ID of the user
     */
    toggleUserApproval: {
      (
        _userId: number | BN | string,
        _approval: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _userId: number | BN | string,
        _approval: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _userId: number | BN | string,
        _approval: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _userId: number | BN | string,
        _approval: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Deploys and tracks a new campagign
     * @param _categoryId ID of category campaign deployer specifies
     */
    createCampaign: {
      (
        _categoryId: number | BN | string,
        _approved: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _categoryId: number | BN | string,
        _approved: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _categoryId: number | BN | string,
        _approved: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _categoryId: number | BN | string,
        _approved: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Activates a campaign. Activating a campaign simply makes the campaign available for listing  on crowdship, events will be stored on thegraph activated or not, Restricted to campaign managers
     * @param _campaignId ID of the campaign
     */
    activateCampaign: {
      (
        _campaignId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _campaignId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _campaignId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _campaignId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Approves a campaign. By approving your campaign all events will  stored on thegraph and listed on crowdship, Restricted to campaign managers
     * @param _campaignId ID of the campaign
     */
    approveCampaign: {
      (
        _campaignId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _campaignId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _campaignId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _campaignId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Modifies a campaign's category.
     * @param _campaignId ID of the campaign
     * @param _newCategoryId ID of the category being switched to
     */
    modifyCampaignCategory: {
      (
        _campaignId: number | BN | string,
        _newCategoryId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _campaignId: number | BN | string,
        _newCategoryId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _campaignId: number | BN | string,
        _newCategoryId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _campaignId: number | BN | string,
        _newCategoryId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Creates a category
     * @param _active Indicates if a category is active allowing for campaigns to be assigned to it
     */
    createCategory: {
      (_active: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Modifies details about a category
     * @param _active Indicates if a category is active allowing for campaigns to be assigned to it
     * @param _categoryId ID of the category
     */
    modifyCategory: {
      (
        _categoryId: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _categoryId: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _categoryId: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _categoryId: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Unpauses the factory, transactions in the factory resumes per usual
     */
    unpauseCampaign: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Pauses the factory, halts all transactions in the factory
     */
    pauseCampaign: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
