/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface FactoryContract extends Truffle.Contract<FactoryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<FactoryInstance>;
}

export interface CampaignFactoryDeployed {
  name: "CampaignFactoryDeployed";
  args: {
    campaignFactory: string;
    governance: string;
    campaignImplementation: string;
    campaignRequestImplementation: string;
    campaignVoteImplementation: string;
    campaignRewardImplementation: string;
    campaignIndex: BN;
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
    5: string;
    6: BN;
  };
}

type AllEvents = CampaignFactoryDeployed;

export interface FactoryInstance extends Truffle.ContractInstance {
  deployedCampaignCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  deployedCampaigns(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  createCampaignFactory: {
    (
      _campaignFactoryImplementation: string,
      _campaignImplementation: string,
      _campaignRequestImplementation: string,
      _campaignVoteImplementation: string,
      _campaignRewardImplementation: string,
      _governance: string,
      _config: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _campaignFactoryImplementation: string,
      _campaignImplementation: string,
      _campaignRequestImplementation: string,
      _campaignVoteImplementation: string,
      _campaignRewardImplementation: string,
      _governance: string,
      _config: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _campaignFactoryImplementation: string,
      _campaignImplementation: string,
      _campaignRequestImplementation: string,
      _campaignVoteImplementation: string,
      _campaignRewardImplementation: string,
      _governance: string,
      _config: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _campaignFactoryImplementation: string,
      _campaignImplementation: string,
      _campaignRequestImplementation: string,
      _campaignVoteImplementation: string,
      _campaignRewardImplementation: string,
      _governance: string,
      _config: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    deployedCampaignCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    deployedCampaigns(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    createCampaignFactory: {
      (
        _campaignFactoryImplementation: string,
        _campaignImplementation: string,
        _campaignRequestImplementation: string,
        _campaignVoteImplementation: string,
        _campaignRewardImplementation: string,
        _governance: string,
        _config: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _campaignFactoryImplementation: string,
        _campaignImplementation: string,
        _campaignRequestImplementation: string,
        _campaignVoteImplementation: string,
        _campaignRewardImplementation: string,
        _governance: string,
        _config: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _campaignFactoryImplementation: string,
        _campaignImplementation: string,
        _campaignRequestImplementation: string,
        _campaignVoteImplementation: string,
        _campaignRewardImplementation: string,
        _governance: string,
        _config: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _campaignFactoryImplementation: string,
        _campaignImplementation: string,
        _campaignRequestImplementation: string,
        _campaignVoteImplementation: string,
        _campaignRewardImplementation: string,
        _governance: string,
        _config: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
