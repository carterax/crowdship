/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ICampaignRewardContract
  extends Truffle.Contract<ICampaignRewardInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ICampaignRewardInstance>;
}

type AllEvents = never;

export interface ICampaignRewardInstance extends Truffle.ContractInstance {
  campaignRewardAddress(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  assignReward: {
    (
      _rewardId: number | BN | string,
      _amount: number | BN | string,
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _rewardId: number | BN | string,
      _amount: number | BN | string,
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _rewardId: number | BN | string,
      _amount: number | BN | string,
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _rewardId: number | BN | string,
      _amount: number | BN | string,
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceRewards: {
    (_user: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_user: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferRewards: {
    (
      _oldAddress: string,
      _newAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _oldAddress: string,
      _newAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _oldAddress: string,
      _newAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _oldAddress: string,
      _newAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    campaignRewardAddress(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    assignReward: {
      (
        _rewardId: number | BN | string,
        _amount: number | BN | string,
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _rewardId: number | BN | string,
        _amount: number | BN | string,
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _rewardId: number | BN | string,
        _amount: number | BN | string,
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _rewardId: number | BN | string,
        _amount: number | BN | string,
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    renounceRewards: {
      (_user: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferRewards: {
      (
        _oldAddress: string,
        _newAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _oldAddress: string,
        _newAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _oldAddress: string,
        _newAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _oldAddress: string,
        _newAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
