/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface CampaignRewardContract
  extends Truffle.Contract<CampaignRewardInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CampaignRewardInstance>;
}

export interface CampaignRewardOwnerSet {
  name: "CampaignRewardOwnerSet";
  args: {
    owner: string;
    0: string;
  };
}

export interface Paused {
  name: "Paused";
  args: {
    account: string;
    0: string;
  };
}

export interface RewardCreated {
  name: "RewardCreated";
  args: {
    rewardId: BN;
    value: BN;
    deliveryDate: BN;
    stock: BN;
    hashedReward: string;
    active: boolean;
    0: BN;
    1: BN;
    2: BN;
    3: BN;
    4: string;
    5: boolean;
  };
}

export interface RewardDestroyed {
  name: "RewardDestroyed";
  args: {
    rewardId: BN;
    0: BN;
  };
}

export interface RewardModified {
  name: "RewardModified";
  args: {
    rewardId: BN;
    value: BN;
    deliveryDate: BN;
    stock: BN;
    active: boolean;
    0: BN;
    1: BN;
    2: BN;
    3: BN;
    4: boolean;
  };
}

export interface RewardRecipientAdded {
  name: "RewardRecipientAdded";
  args: {
    rewardRecipientId: BN;
    rewardId: BN;
    amount: BN;
    user: string;
    0: BN;
    1: BN;
    2: BN;
    3: string;
  };
}

export interface RewardRecipientApproval {
  name: "RewardRecipientApproval";
  args: {
    rewardRecipientId: BN;
    0: BN;
  };
}

export interface RewardStockIncreased {
  name: "RewardStockIncreased";
  args: {
    rewardId: BN;
    count: BN;
    0: BN;
    1: BN;
  };
}

export interface RewarderApproval {
  name: "RewarderApproval";
  args: {
    rewardRecipientId: BN;
    status: boolean;
    0: BN;
    1: boolean;
  };
}

export interface Unpaused {
  name: "Unpaused";
  args: {
    account: string;
    0: string;
  };
}

type AllEvents =
  | CampaignRewardOwnerSet
  | Paused
  | RewardCreated
  | RewardDestroyed
  | RewardModified
  | RewardRecipientAdded
  | RewardRecipientApproval
  | RewardStockIncreased
  | RewarderApproval
  | Unpaused;

export interface CampaignRewardInstance extends Truffle.ContractInstance {
  campaign(txDetails?: Truffle.TransactionDetails): Promise<string>;

  campaignFactoryInterface(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  campaignInterface(txDetails?: Truffle.TransactionDetails): Promise<string>;

  campaignRewardAddress(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Returns true if the contract is paused, and false otherwise.
   */
  paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  rewardRecipients(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: string; 2: boolean; 3: boolean }>;

  rewardToRewardRecipientCount(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  rewards(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: string; 4: boolean; 5: boolean }>;

  userRewardCount(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Constructor
   * @param _campaign Address of campaign this contract belongs to
   * @param _campaignFactory Address of factory
   */
  __CampaignReward_init: {
    (
      _campaignFactory: string,
      _campaign: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _campaignFactory: string,
      _campaign: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _campaignFactory: string,
      _campaign: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _campaignFactory: string,
      _campaign: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Creates rewards contributors can attain
   * @param _active Indicates if contributors can attain the reward
   * @param _deliveryDate Time in which reward will be deliverd to contriutors
   * @param _stock Quantity available for dispatch
   * @param _value Reward cost
   */
  createReward: {
    (
      _value: number | BN | string,
      _deliveryDate: number | BN | string,
      _stock: number | BN | string,
      _hashedReward: string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      _deliveryDate: number | BN | string,
      _stock: number | BN | string,
      _hashedReward: string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      _deliveryDate: number | BN | string,
      _stock: number | BN | string,
      _hashedReward: string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      _deliveryDate: number | BN | string,
      _stock: number | BN | string,
      _hashedReward: string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Assigns a reward to a user after payment from parent contract Campaign
   * @param _amount Amount being paid by the user
   * @param _rewardId ID of the reward being assigned
   * @param _user Address of user reward is being assigned to
   */
  assignReward: {
    (
      _rewardId: number | BN | string,
      _amount: number | BN | string,
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _rewardId: number | BN | string,
      _amount: number | BN | string,
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _rewardId: number | BN | string,
      _amount: number | BN | string,
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _rewardId: number | BN | string,
      _amount: number | BN | string,
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Modifies a reward by id
   * @param _active Indicates if contributors can attain the reward
   * @param _deliveryDate Time in which reward will be deliverd to contriutors
   * @param _rewardId Reward unique id
   * @param _stock Quantity available for dispatch
   * @param _value Reward cost
   */
  modifyReward: {
    (
      _rewardId: number | BN | string,
      _value: number | BN | string,
      _deliveryDate: number | BN | string,
      _stock: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _rewardId: number | BN | string,
      _value: number | BN | string,
      _deliveryDate: number | BN | string,
      _stock: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _rewardId: number | BN | string,
      _value: number | BN | string,
      _deliveryDate: number | BN | string,
      _stock: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _rewardId: number | BN | string,
      _value: number | BN | string,
      _deliveryDate: number | BN | string,
      _stock: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Increases a reward stock count
   * @param _count Stock count to increase by
   * @param _rewardId Reward unique id
   */
  increaseRewardStock: {
    (
      _rewardId: number | BN | string,
      _count: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _rewardId: number | BN | string,
      _count: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _rewardId: number | BN | string,
      _count: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _rewardId: number | BN | string,
      _count: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Deletes a reward by id
   * @param _rewardId Reward unique id
   */
  destroyReward: {
    (
      _rewardId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _rewardId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _rewardId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _rewardId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Called by the campaign owner to indicate they delivered the reward to the rewardRecipient
   * @param _rewardRecipientId ID to struct containing reward and user to be rewarded
   * @param _status Indicates if the delivery was successful or not
   */
  campaignSentReward: {
    (
      _rewardRecipientId: number | BN | string,
      _status: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _rewardRecipientId: number | BN | string,
      _status: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _rewardRecipientId: number | BN | string,
      _status: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _rewardRecipientId: number | BN | string,
      _status: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Called by a user eligible for rewards to indicate they received their reward
   * @param _rewardRecipientId ID to struct containing reward and user to be rewarded
   */
  userReceivedCampaignReward: {
    (
      _rewardRecipientId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _rewardRecipientId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _rewardRecipientId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _rewardRecipientId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Renounces rewards owned by the specified user
   * @param _user Address of user who rewards are being renounced
   */
  renounceRewards: {
    (_user: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_user: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Transfers rewards from the old owner to a new owner
   * @param _newAddress Address of new owner rewards are being transferred to
   * @param _oldAddress Address of previous owner of rewards
   */
  transferRewards: {
    (
      _oldAddress: string,
      _newAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _oldAddress: string,
      _newAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _oldAddress: string,
      _newAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _oldAddress: string,
      _newAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    campaign(txDetails?: Truffle.TransactionDetails): Promise<string>;

    campaignFactoryInterface(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    campaignInterface(txDetails?: Truffle.TransactionDetails): Promise<string>;

    campaignRewardAddress(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    rewardRecipients(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: string; 2: boolean; 3: boolean }>;

    rewardToRewardRecipientCount(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    rewards(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: string; 4: boolean; 5: boolean }>;

    userRewardCount(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Constructor
     * @param _campaign Address of campaign this contract belongs to
     * @param _campaignFactory Address of factory
     */
    __CampaignReward_init: {
      (
        _campaignFactory: string,
        _campaign: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _campaignFactory: string,
        _campaign: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _campaignFactory: string,
        _campaign: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _campaignFactory: string,
        _campaign: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Creates rewards contributors can attain
     * @param _active Indicates if contributors can attain the reward
     * @param _deliveryDate Time in which reward will be deliverd to contriutors
     * @param _stock Quantity available for dispatch
     * @param _value Reward cost
     */
    createReward: {
      (
        _value: number | BN | string,
        _deliveryDate: number | BN | string,
        _stock: number | BN | string,
        _hashedReward: string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        _deliveryDate: number | BN | string,
        _stock: number | BN | string,
        _hashedReward: string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        _deliveryDate: number | BN | string,
        _stock: number | BN | string,
        _hashedReward: string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        _deliveryDate: number | BN | string,
        _stock: number | BN | string,
        _hashedReward: string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Assigns a reward to a user after payment from parent contract Campaign
     * @param _amount Amount being paid by the user
     * @param _rewardId ID of the reward being assigned
     * @param _user Address of user reward is being assigned to
     */
    assignReward: {
      (
        _rewardId: number | BN | string,
        _amount: number | BN | string,
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _rewardId: number | BN | string,
        _amount: number | BN | string,
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _rewardId: number | BN | string,
        _amount: number | BN | string,
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _rewardId: number | BN | string,
        _amount: number | BN | string,
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Modifies a reward by id
     * @param _active Indicates if contributors can attain the reward
     * @param _deliveryDate Time in which reward will be deliverd to contriutors
     * @param _rewardId Reward unique id
     * @param _stock Quantity available for dispatch
     * @param _value Reward cost
     */
    modifyReward: {
      (
        _rewardId: number | BN | string,
        _value: number | BN | string,
        _deliveryDate: number | BN | string,
        _stock: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _rewardId: number | BN | string,
        _value: number | BN | string,
        _deliveryDate: number | BN | string,
        _stock: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _rewardId: number | BN | string,
        _value: number | BN | string,
        _deliveryDate: number | BN | string,
        _stock: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _rewardId: number | BN | string,
        _value: number | BN | string,
        _deliveryDate: number | BN | string,
        _stock: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Increases a reward stock count
     * @param _count Stock count to increase by
     * @param _rewardId Reward unique id
     */
    increaseRewardStock: {
      (
        _rewardId: number | BN | string,
        _count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _rewardId: number | BN | string,
        _count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _rewardId: number | BN | string,
        _count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _rewardId: number | BN | string,
        _count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Deletes a reward by id
     * @param _rewardId Reward unique id
     */
    destroyReward: {
      (
        _rewardId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _rewardId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _rewardId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _rewardId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Called by the campaign owner to indicate they delivered the reward to the rewardRecipient
     * @param _rewardRecipientId ID to struct containing reward and user to be rewarded
     * @param _status Indicates if the delivery was successful or not
     */
    campaignSentReward: {
      (
        _rewardRecipientId: number | BN | string,
        _status: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _rewardRecipientId: number | BN | string,
        _status: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _rewardRecipientId: number | BN | string,
        _status: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _rewardRecipientId: number | BN | string,
        _status: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Called by a user eligible for rewards to indicate they received their reward
     * @param _rewardRecipientId ID to struct containing reward and user to be rewarded
     */
    userReceivedCampaignReward: {
      (
        _rewardRecipientId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _rewardRecipientId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _rewardRecipientId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _rewardRecipientId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Renounces rewards owned by the specified user
     * @param _user Address of user who rewards are being renounced
     */
    renounceRewards: {
      (_user: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _user: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Transfers rewards from the old owner to a new owner
     * @param _newAddress Address of new owner rewards are being transferred to
     * @param _oldAddress Address of previous owner of rewards
     */
    transferRewards: {
      (
        _oldAddress: string,
        _newAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _oldAddress: string,
        _newAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _oldAddress: string,
        _newAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _oldAddress: string,
        _newAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
